{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Documents/git/routebuilder/src/components/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';\nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json';\nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\nimport { getUniqueCountries } from '../utils/countryUtils';\nimport Select from 'react-select';\nimport AsyncSelect from 'react-select/async';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COTERMINALS = {\n  // North America\n  'CHI': ['MDW', 'ORD'],\n  'DAL': ['DFW', 'DAL'],\n  'HOU': ['IAH', 'HOU'],\n  'NYC': ['JFK', 'LGA', 'EWR'],\n  'SFL': ['FLL', 'MIA', 'PBI'],\n  'YTO': ['YTZ', 'YHM', 'YYZ'],\n  'WAS': ['IAD', 'DCA'],\n  // South America\n  'BUE': ['AEP', 'EZE'],\n  'RIO': ['GIG', 'SDU'],\n  'SAO': ['CGH', 'GRU', 'VCP'],\n  // Europe\n  'IST': ['IST', 'SAW'],\n  'LON': ['LCY', 'LGW', 'LHR', 'LTN', 'STN'],\n  'MIL': ['BGY', 'LIN', 'MXP'],\n  'MOW': ['DME', 'SVO', 'VNO', 'ZIA'],\n  'PAR': ['CDG', 'ORY'],\n  'STO': ['ARN', 'BMA'],\n  // Asia\n  'BJS': ['PEK', 'PKX'],\n  'JKT': ['CGK', 'HLP'],\n  'OSA': ['ITM', 'KIX', 'UKB'],\n  'SPK': ['CTS', 'OKD'],\n  'SEL': ['GMP', 'ICN'],\n  'SHA': ['SHA', 'PVG'],\n  'TPE': ['TSA', 'TPE'],\n  'TYO': ['HND', 'NRT']\n};\nfunction getCoTerminalGroup(airport) {\n  for (const [group, airports] of Object.entries(COTERMINALS)) {\n    if (airports.includes(airport)) {\n      return group;\n    }\n  }\n  return null;\n}\nfunction isValidCoTerminalRoute(newSegment, existingPath) {\n  const allAirports = [...existingPath.map(seg => seg.Departure_IATA), ...existingPath.map(seg => seg.Arrival_IATA), newSegment[\"Departure IATA\"], newSegment[\"Arrival IATA\"]];\n  const usedCoTerminals = new Map();\n  for (const airport of allAirports) {\n    const coTerminalGroup = getCoTerminalGroup(airport);\n    if (coTerminalGroup) {\n      if (usedCoTerminals.has(coTerminalGroup)) {\n        // If we already used a different airport from this co-terminal group\n        if (usedCoTerminals.get(coTerminalGroup) !== airport) {\n          return false;\n        }\n      } else {\n        usedCoTerminals.set(coTerminalGroup, airport);\n      }\n    }\n  }\n  return true;\n}\n\n// Constants for region restrictions\nconst EUROPEAN_COUNTRIES = new Set(['Germany', 'United Kingdom', 'France', 'Italy', 'Spain', 'Poland', 'Ukraine', 'Romania', 'Netherlands', 'Belgium', 'Czechia', 'Sweden', 'Portugal', 'Greece', 'Hungary', 'Austria', 'Belarus', 'Switzerland', 'Bulgaria', 'Serbia', 'Denmark', 'Finland', 'Norway', 'Slovakia', 'Ireland', 'Croatia', 'Bosnia And Herzegovina', 'Moldova', 'Lithuania', 'Albania', 'Slovenia', 'Latvia', 'North Macedonia', 'Estonia', 'Luxembourg', 'Montenegro', 'Malta', 'Iceland']);\n\n// First, let's create a helper function to check if a route avoids certain countries\nconst isRouteAvoidingCountries = (route, avoidCountries) => {\n  // Check each airport in the route\n  for (const segment of route) {\n    const departureAirport = airports.find(a => a.IATA === segment.Departure_IATA);\n    const arrivalAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n\n    // If any airport in the route is in an avoided country, return false\n    if (departureAirport && avoidCountries.includes(departureAirport.Country)) {\n      return false;\n    }\n    if (arrivalAirport && avoidCountries.includes(arrivalAirport.Country)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Create airlines list from your JSON imports\nconst airlines = [{\n  value: 'A3',\n  label: 'Aegean Airlines (A3)'\n}, {\n  value: 'AC',\n  label: 'Air Canada (AC)'\n}, {\n  value: 'AI',\n  label: 'Air India (AI)'\n}, {\n  value: 'NZ',\n  label: 'Air New Zealand (NZ)'\n}, {\n  value: 'NH',\n  label: 'All Nippon Airways (NH)'\n}, {\n  value: 'OZ',\n  label: 'Asiana Airlines (OZ)'\n}, {\n  value: 'OS',\n  label: 'Austrian Airlines (OS)'\n}, {\n  value: 'SN',\n  label: 'Brussels Airlines (SN)'\n}, {\n  value: 'MS',\n  label: 'EgyptAir (MS)'\n}, {\n  value: 'BR',\n  label: 'EVA Air (BR)'\n}, {\n  value: 'GF',\n  label: 'Gulf Air (GF)'\n}, {\n  value: 'LO',\n  label: 'LOT Polish Airlines (LO)'\n}, {\n  value: 'LH',\n  label: 'Lufthansa (LH)'\n}, {\n  value: 'WY',\n  label: 'Oman Air (WY)'\n}, {\n  value: 'SQ',\n  label: 'Singapore Airlines (SQ)'\n}, {\n  value: 'SA',\n  label: 'South African Airways (SA)'\n}, {\n  value: 'LX',\n  label: 'Swiss International Air Lines (LX)'\n}, {\n  value: 'TP',\n  label: 'TAP Air Portugal (TP)'\n}, {\n  value: 'TG',\n  label: 'Thai Airways (TG)'\n}, {\n  value: 'UA',\n  label: 'United Airlines (UA)'\n}].sort((a, b) => a.label.localeCompare(b.label));\n\n// Helper function to calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n\n// Calculate total distance for a route\nconst calculateRouteDistance = route => {\n  let totalDistance = 0;\n  for (let i = 0; i < route.length; i++) {\n    const segment = route[i];\n    const departureAirport = airports.find(a => a.IATA === segment.Departure_IATA);\n    const arrivalAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    if (departureAirport && arrivalAirport) {\n      const segmentDistance = calculateDistance(departureAirport.Latitude, departureAirport.Longitude, arrivalAirport.Latitude, arrivalAirport.Longitude);\n      totalDistance += segmentDistance;\n    }\n  }\n  return totalDistance;\n};\n\n// ===============================\n// Hub Airport Exceptions\n// ===============================\n\n// Airports exempt from standard layover restrictions\nconst HUB_EXCEPTIONS = new Set([\n// Star Alliance Hubs\n'ATH',\n// Aegean\n'PEK', 'CTU', 'PVG',\n// Air China\n'DEL', 'BOM',\n// Air India\n'AKL', 'WLG', 'CHC',\n// Air New Zealand\n'HND', 'NRT', 'KIX',\n// ANA\n'ICN', 'GMP',\n// Asiana\n'VIE',\n// Austrian\n'BOG', 'MDE', 'UIO', 'GUA', 'SAL',\n// Avianca\n'BRU',\n// Brussels\n'PTY',\n// Copa\n'ZAG',\n// Croatia\n'CAI',\n// EgyptAir\n'ADD',\n// Ethiopian\n'TPE',\n// EVA\n'WAW',\n// LOT\n'FRA', 'MUC',\n// Lufthansa\n'SZX',\n// Shenzhen\n'SIN',\n// Singapore\n'JNB',\n// South African\n'ZRH', 'GVA',\n// SWISS\n'LIS', 'OPO',\n// TAP\n'BKK',\n// Thai\n'IST',\n// Turkish\n'ORD', 'DEN', 'IAH', 'LAX', 'EWR', 'SFO', 'IAD',\n// United\n// Non-Alliance Hubs\n'YVO', 'YUL',\n// Air Creebec\n'MUC', 'FRA',\n// Air Dolomiti\n'MRU',\n// Air Mauritius\n'BEG',\n// Air Serbia\n'VCP', 'CNF', 'REC',\n// Azul\n'YWG', 'YTH',\n// Calm Air\n'YZF', 'YFB',\n// Canadian North\n'HKG',\n// Cathay Pacific\n'FRA',\n// Discover\n'ZRH',\n// Edelweiss\n'AUH',\n// Etihad\n'DUS', 'CGN', 'HAM', 'STR',\n// Eurowings\n'GRU', 'GIG', 'BSB',\n// GOL\n'BAH',\n// Gulf Air\n'PVG', 'SHA',\n// Juneyao\n'ATH',\n// Olympic\n'MCT',\n// Oman Air\n'YYT', 'YHZ',\n// PAL Airlines\n'AYT', 'ADB',\n// SunExpress\n'BNE', 'MEL', 'SYD' // Virgin Australia\n]);\n\n// Add this helper function near the top with other helper functions\nconst isValidZoneProgression = path => {\n  var _airports$find, _airports$find2;\n  if (path.length <= 1) return true;\n\n  // Get origin, destination, and layover zones\n  const originZone = (_airports$find = airports.find(a => a.IATA === path[0].Departure_IATA)) === null || _airports$find === void 0 ? void 0 : _airports$find.Zone;\n  const destZone = (_airports$find2 = airports.find(a => a.IATA === path[path.length - 1].Arrival_IATA)) === null || _airports$find2 === void 0 ? void 0 : _airports$find2.Zone;\n  const layoverZones = new Set(path.slice(0, -1).map(segment => {\n    var _airports$find3;\n    return (_airports$find3 = airports.find(a => a.IATA === segment.Arrival_IATA)) === null || _airports$find3 === void 0 ? void 0 : _airports$find3.Zone;\n  }));\n\n  // Rule 1: If origin and destination are in same zone, no third zone allowed\n  if (originZone === destZone) {\n    for (const zone of layoverZones) {\n      if (zone !== originZone) return false;\n    }\n    return true;\n  }\n\n  // Rule 2: North America <-> Atlantic: no Pacific layovers\n  if (originZone === 'North America' && destZone === 'Atlantic' || originZone === 'Atlantic' && destZone === 'North America') {\n    if (layoverZones.has('Pacific')) return false;\n  }\n\n  // Rule 3: North America <-> South America: no Pacific or Atlantic layovers\n  if (originZone === 'North America' && destZone === 'South America' || originZone === 'South America' && destZone === 'North America') {\n    if (layoverZones.has('Pacific') || layoverZones.has('Atlantic')) return false;\n  }\n  return true;\n};\nexport function SearchPage() {\n  _s();\n  var _airports$find8, _airports$find9, _airports$find10, _airports$find11, _airports$find12, _airports$find13;\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Initialize state from URL params\n  const [maxSegments, setMaxSegments] = useState(() => {\n    const segments = searchParams.get('maxSegments');\n    return segments ? parseInt(segments, 10) : 4;\n  });\n  const [avoidAirlines, setAvoidAirlines] = useState(() => {\n    const airlines = searchParams.get('avoidAirlines');\n    return airlines ? airlines.split(',') : [];\n  });\n\n  // Update URL when params change\n  useEffect(() => {\n    const newParams = new URLSearchParams(searchParams);\n\n    // Update maxSegments\n    if (maxSegments !== 4) {\n      newParams.set('maxSegments', maxSegments.toString());\n    } else {\n      newParams.delete('maxSegments');\n    }\n\n    // Update avoidAirlines\n    if (avoidAirlines.length > 0) {\n      newParams.set('avoidAirlines', avoidAirlines.join(','));\n    } else {\n      newParams.delete('avoidAirlines');\n    }\n\n    // Update URL without reloading\n    navigate(`?${newParams.toString()}`, {\n      replace: true\n    });\n  }, [maxSegments, avoidAirlines]);\n\n  // Update handlers\n  const handleMaxSegmentsChange = value => {\n    const newValue = parseInt(value, 10);\n    if (!isNaN(newValue) && newValue >= 0 && newValue <= 6) {\n      setMaxSegments(newValue);\n    }\n  };\n  const handleAvoidAirlinesChange = selected => {\n    setAvoidAirlines(selected ? selected.map(option => option.value) : []);\n  };\n\n  // State for selected airports and search results\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [avoidCountries, setAvoidCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get the country options when component mounts\n  const countryOptions = useMemo(() => {\n    return getUniqueCountries(airports);\n  }, []);\n\n  // Calculates direct distance between airports using Haversine formula\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    if (!originAirport || !destAirport) return null;\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  // Recursive function to find all valid routes between origin and destination\n  // Constraints:\n  // - Maximum 4 segments (3 stops)\n  // - Total distance <= 2x direct distance\n  // - No revisiting airports\n  // - No backtracking to previously visited countries (except direct connections)\n  // - Maximum 2 layovers in US/Canada unless both origin and destination are in US/Canada\n  const findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n    // Create filtered allRoutes based on avoided airlines\n    const allRoutes = [...(avoidAirlines.includes('UA') ? [] : UA_miles), ...(avoidAirlines.includes('SQ') ? [] : SQ_miles), ...(avoidAirlines.includes('LH') ? [] : LH_miles), ...(avoidAirlines.includes('LX') ? [] : LX_miles), ...(avoidAirlines.includes('TG') ? [] : TG_miles), ...(avoidAirlines.includes('BR') ? [] : BR_miles), ...(avoidAirlines.includes('NH') ? [] : NH_miles), ...(avoidAirlines.includes('OS') ? [] : OS_miles), ...(avoidAirlines.includes('OZ') ? [] : OZ_miles), ...(avoidAirlines.includes('NZ') ? [] : NZ_miles), ...(avoidAirlines.includes('SA') ? [] : SA_miles), ...(avoidAirlines.includes('AI') ? [] : AI_miles), ...(avoidAirlines.includes('LO') ? [] : LO_miles), ...(avoidAirlines.includes('SN') ? [] : SN_miles), ...(avoidAirlines.includes('A3') ? [] : A3_miles), ...(avoidAirlines.includes('TP') ? [] : TP_miles), ...(avoidAirlines.includes('MS') ? [] : MS_miles), ...(avoidAirlines.includes('WY') ? [] : WY_miles), ...(avoidAirlines.includes('GF') ? [] : GF_miles), ...(avoidAirlines.includes('AC') ? [] : AC_miles)];\n    const routes = [];\n\n    // Get origin and destination airport details for US/Canada check\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    const isOriginNorthAmerica = ['United States', 'Canada'].includes(originAirport === null || originAirport === void 0 ? void 0 : originAirport.Country);\n    const isDestNorthAmerica = ['United States', 'Canada'].includes(destAirport === null || destAirport === void 0 ? void 0 : destAirport.Country);\n    const bothInNorthAmerica = isOriginNorthAmerica && isDestNorthAmerica;\n\n    // Count existing North American layovers, treating non-hubs and hubs separately\n    const northAmericaLayovers = path.reduce((count, segment) => {\n      const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      if (!layoverAirport || !['United States', 'Canada'].includes(layoverAirport.Country)) {\n        return count;\n      }\n      if (HUB_EXCEPTIONS.has(segment.Arrival_IATA)) {\n        return {\n          ...count,\n          hubCount: 1\n        }; // All hubs count as 1 total\n      }\n      return {\n        ...count,\n        nonHubCount: count.nonHubCount + 1\n      }; // Each non-hub counts as 1\n    }, {\n      nonHubCount: 0,\n      hubCount: 0\n    });\n\n    // Count existing European layovers in the current path\n    const europeanLayovers = path.reduce((count, segment) => {\n      const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      if (!layoverAirport || !EUROPEAN_COUNTRIES.has(layoverAirport.Country)) {\n        return count;\n      }\n\n      // If it's a hub airport, we've already counted hubs, don't increment\n      if (HUB_EXCEPTIONS.has(segment.Arrival_IATA)) {\n        return count + (count.hasHub ? 0 : 1); // Only count hubs once total\n      }\n\n      // Non-hub European airports count as 1 each\n      return count + 1;\n    }, {\n      total: 0,\n      hasHub: false\n    });\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n      const multiplier = 2 + (path.length - 1) * 0.2; // 2.0x for 1 stop, 2.2x for 2 stops, etc.\n      if (totalDistance <= directDistance * multiplier) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 6 segments (5 stops)\n    if (path.length >= maxSegments) {\n      return [];\n    }\n\n    // Get current point and its country\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    const currentAirport = airports.find(a => a.IATA === currentPoint);\n    if (!currentAirport) return [];\n\n    // Add helper function to count layovers by country\n    const getLayoverCountByCountry = currentPath => {\n      const countByCountry = {};\n      currentPath.forEach(segment => {\n        const airport = airports.find(a => a.IATA === segment.Arrival_IATA);\n        if (!airport) return;\n        const country = airport.Country;\n        if (!countByCountry[country]) {\n          countByCountry[country] = {\n            nonHubCount: 0,\n            hasHub: false\n          };\n        }\n        if (HUB_EXCEPTIONS.has(segment.Arrival_IATA)) {\n          countByCountry[country].hasHub = true;\n        } else {\n          countByCountry[country].nonHubCount += 1;\n        }\n      });\n      return countByCountry;\n    };\n    const possibleSegments = allRoutes.filter(route => {\n      var _airports$find4, _airports$find5;\n      if (route[\"Departure IATA\"] !== currentPoint) return false;\n\n      // Get origin and destination countries\n      const originAirport = airports.find(a => a.IATA === origin);\n      const destAirport = airports.find(a => a.IATA === destination);\n      const thisArrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      if (!originAirport || !destAirport || !thisArrivalAirport) return false;\n\n      // Check for multiple layovers in same country\n      const countryLayovers = getLayoverCountByCountry(path);\n      const nextCountry = thisArrivalAirport.Country;\n\n      // Allow multiple stops only if it's origin or destination country\n      if (nextCountry !== originAirport.Country && nextCountry !== destAirport.Country && countryLayovers[nextCountry] >= 1 && !HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n        return false;\n      }\n\n      // Get zones\n      const originZone = (_airports$find4 = airports.find(a => a.IATA === origin)) === null || _airports$find4 === void 0 ? void 0 : _airports$find4.Zone;\n      const destZone = (_airports$find5 = airports.find(a => a.IATA === destination)) === null || _airports$find5 === void 0 ? void 0 : _airports$find5.Zone;\n      const connectZone = thisArrivalAirport === null || thisArrivalAirport === void 0 ? void 0 : thisArrivalAirport.Zone;\n\n      // Allow progressive zone changes\n      const validZoneProgression = path => {\n        for (let i = 1; i < path.length - 1; i++) {\n          const prevZone = airports.find(a => a.IATA === path[i - 1][\"Departure IATA\"]).Zone;\n          const currentZone = airports.find(a => a.IATA === path[i][\"Departure IATA\"]).Zone;\n          const nextZone = airports.find(a => a.IATA === path[i + 1][\"Departure IATA\"]).Zone;\n\n          // Allow staying in same zone or moving forward\n          if (currentZone !== prevZone && currentZone !== nextZone) {\n            // Only allow backtracking through hubs\n            if (!HUB_EXCEPTIONS.has(path[i][\"Departure IATA\"])) {\n              return false;\n            }\n          }\n        }\n        return true;\n      };\n\n      // Rule: When flying between two zones, cannot connect via a third zone\n      // Example: North America to Atlantic cannot connect via Pacific\n      if (!isValidZoneProgression(path, route)) {\n        return false;\n      }\n\n      // Add co-terminal validation\n      if (!isValidCoTerminalRoute(route, path)) {\n        return false;\n      }\n\n      // Get the arrival airport details\n      const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      if (!arrivalAirport) return false;\n\n      // Check if adding this segment would exceed US/Canada layover limit\n      const isArrivalNorthAmerica = ['United States', 'Canada'].includes(arrivalAirport.Country);\n      if (isArrivalNorthAmerica && !bothInNorthAmerica) {\n        let nextNonHubCount = northAmericaLayovers.nonHubCount;\n        let nextHubCount = northAmericaLayovers.hubCount;\n        if (HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n          nextHubCount = 1;\n        } else {\n          nextNonHubCount += 1;\n        }\n\n        // Total layovers = non-hub count + hub count (all hubs count as 1)\n        if (nextNonHubCount + nextHubCount > 2) {\n          return false;\n        }\n      }\n\n      // Check if adding this segment would exceed European layover limit\n      const isEuropeanArrival = EUROPEAN_COUNTRIES.has(arrivalAirport.Country);\n      const isEuropeanHub = HUB_EXCEPTIONS.has(route[\"Arrival IATA\"]);\n      if (isEuropeanArrival) {\n        let newLayoverCount = europeanLayovers;\n        if (isEuropeanHub && !europeanLayovers.hasHub) {\n          newLayoverCount += 1; // First hub encounter counts as 1\n        } else if (!isEuropeanHub) {\n          newLayoverCount += 1; // Non-hub counts as 1\n        }\n        if (newLayoverCount > 2) {\n          return false;\n        }\n      }\n\n      // Check if we're not backtracking to a visited airport\n      if (visited.has(route[\"Arrival IATA\"])) return false;\n\n      // Check if we're not backtracking to a visited country\n      // Exception: Allow same country connection if it's a direct continuation\n      const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) && arrivalAirport.Country !== currentAirport.Country;\n      if (isBacktrackingCountry) return false;\n\n      // Rule: Maximum 1 layover per transit country (with hub exceptions)\n      const layoverCounts = getLayoverCountByCountry(path);\n      const arrivalCountry = arrivalAirport.Country;\n      if (arrivalCountry !== originAirport.Country && arrivalCountry !== destAirport.Country && layoverCounts[arrivalCountry] >= 1 && !HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n        // Add exception check\n        return false;\n      }\n\n      // Rule: Maximum 2 stops in Europe (with hub exceptions)\n      if (isEuropeanArrival && europeanLayovers >= 2 && !HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n        // Add exception check\n        return false;\n      }\n\n      // Check if adding this stop would exceed country limit\n      if (nextCountry !== originAirport.Country && nextCountry !== destAirport.Country) {\n        const currentCount = countryLayovers[nextCountry] || {\n          nonHubCount: 0,\n          hasHub: false\n        };\n        let totalStops = currentCount.nonHubCount;\n        if (currentCount.hasHub || HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n          totalStops += 1; // All hubs in country count as 1 total\n        }\n        if (totalStops >= 2) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n\n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + segment[\"Flight Distance (miles)\"];\n\n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n\n      // Update visited sets\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n      const newVisitedCountries = new Set(visitedCountries);\n      newVisitedCountries.add(arrivalAirport.Country);\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"],\n        Country: arrivalAirport.Country // Add country info for reference\n      }];\n      const newRoutes = findPossibleRoutes(origin, destination, newVisited, newVisitedCountries, newPath, directDistance);\n      routes.push(...newRoutes);\n    }\n    return routes;\n  };\n\n  // Handles the search button click\n  // Updates URL parameters and finds possible routes\n  const handleSearch = async () => {\n    // Show loading overlay immediately\n    setIsLoading(true);\n    setShowResults(false);\n    try {\n      // Wait for 250ms to ensure overlay is visible\n      await new Promise(resolve => setTimeout(resolve, 250));\n      if (departureAirport && arrivalAirport) {\n        const params = new URLSearchParams();\n        params.set('from', departureAirport);\n        params.set('to', arrivalAirport);\n        params.set('avoidCountries', avoidCountries.join(','));\n        window.history.pushState({}, '', `${window.location.pathname}?${params.toString()}`);\n        const originAirport = airports.find(a => a.IATA === departureAirport);\n        const visited = new Set([departureAirport]);\n        const visitedCountries = new Set([originAirport.Country]);\n        const routes = findPossibleRoutes(departureAirport, arrivalAirport, visited, visitedCountries);\n\n        // Filter out routes that go through avoided countries\n        const filteredRoutes = routes.filter(route => isRouteAvoidingCountries(route, avoidCountries));\n\n        // Sort routes by total distance\n        const sortedRoutes = filteredRoutes.sort((a, b) => {\n          const distanceA = calculateRouteDistance(a);\n          const distanceB = calculateRouteDistance(b);\n          return distanceA - distanceB; // Low to high\n        });\n        setSearchResults(sortedRoutes);\n        setShowResults(true);\n      }\n    } catch (error) {\n      console.error('Error searching routes:', error);\n    } finally {\n      // Add a small delay before hiding loading screen for smoother transition\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setIsLoading(false);\n    }\n  };\n\n  // Airport search with better IATA and name prioritization\n  const getAirportOptions = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n\n    // Priority 1: Exact IATA match\n    const exactIataMatches = airports.filter(airport => airport.IATA.toLowerCase() === input);\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = airports.filter(airport => airport.IATA.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport));\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = airports.filter(airport => airport.Name.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport));\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = airports.filter(airport => airport.Name.toLowerCase().includes(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport) && !startingNameMatches.includes(airport));\n\n    // Combine all matches with proper ordering\n    const allMatches = [...exactIataMatches, ...startingIataMatches, ...startingNameMatches, ...containingNameMatches].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n\n  // Country search with progressive character matching\n  const getCountryOptions = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n\n    // First: Exact matches\n    const exactMatches = countries.filter(country => country.toLowerCase() === input);\n\n    // Second: Starting matches (progressive matching)\n    const startingMatches = countries.filter(country => country.toLowerCase().startsWith(input) && !exactMatches.includes(country));\n\n    // Third: Progressive character matching\n    const progressiveMatches = countries.filter(country => {\n      if (exactMatches.includes(country) || startingMatches.includes(country)) {\n        return false;\n      }\n      const countryChars = country.toLowerCase();\n      let lastIndex = -1;\n\n      // Check if characters appear in sequence\n      for (const char of input) {\n        const index = countryChars.indexOf(char, lastIndex + 1);\n        if (index === -1) return false;\n        lastIndex = index;\n      }\n      return true;\n    });\n\n    // Combine all matches with proper ordering\n    const allMatches = [...exactMatches, ...startingMatches, ...progressiveMatches].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(country => ({\n      value: country,\n      label: country\n    }));\n  };\n  const filterCountries = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n\n    // Priority 1: Exact matches\n    const exactMatches = countries.filter(country => country.toLowerCase() === input);\n\n    // Priority 2: Starts with input\n    const startingMatches = countries.filter(country => country.toLowerCase().startsWith(input) && !exactMatches.includes(country));\n\n    // Priority 3: Contains input\n    const containingMatches = countries.filter(country => country.toLowerCase().includes(input) && !exactMatches.includes(country) && !startingMatches.includes(country));\n    return [...exactMatches, ...startingMatches, ...containingMatches].slice(0, 5).map(country => ({\n      value: country,\n      label: country\n    }));\n  };\n  const loadCountryOptions = inputValue => new Promise(resolve => {\n    resolve(filterCountries(inputValue));\n  });\n  const filterAirports = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n\n    // Filter out airports from avoided countries first\n    const availableAirports = airports.filter(airport => !avoidCountries.includes(airport.Country));\n\n    // Priority 1: Exact IATA match\n    const exactIataMatches = availableAirports.filter(airport => airport.IATA.toLowerCase() === input);\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = availableAirports.filter(airport => airport.IATA.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport));\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = availableAirports.filter(airport => airport.Name.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport));\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = availableAirports.filter(airport => airport.Name.toLowerCase().includes(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport) && !startingNameMatches.includes(airport));\n\n    // Combine all matches with proper ordering\n    const allMatches = [...exactIataMatches, ...startingIataMatches, ...startingNameMatches, ...containingNameMatches].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n  const loadAirportOptions = inputValue => new Promise(resolve => {\n    resolve(filterAirports(inputValue));\n  });\n\n  // Filter airlines function\n  const filterAirlines = inputValue => {\n    if (!inputValue) return airlines;\n    const input = inputValue.toLowerCase().trim();\n\n    // Priority 1: Exact airline code match\n    const exactCodeMatches = airlines.filter(airline => airline.value.toLowerCase() === input);\n\n    // Priority 2: Starting airline code match\n    const startingCodeMatches = airlines.filter(airline => airline.value.toLowerCase().startsWith(input) && !exactCodeMatches.includes(airline));\n\n    // Priority 3: Airline name contains input\n    const nameMatches = airlines.filter(airline => airline.label.toLowerCase().includes(input) && !exactCodeMatches.includes(airline) && !startingCodeMatches.includes(airline));\n    return [...exactCodeMatches, ...startingCodeMatches, ...nameMatches];\n  };\n  const loadAirlineOptions = inputValue => new Promise(resolve => {\n    resolve(filterAirlines(inputValue));\n  });\n\n  // Also clear selected airports if their country is now avoided\n  useEffect(() => {\n    if (departureAirport) {\n      var _airports$find6;\n      const departureCountry = (_airports$find6 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find6 === void 0 ? void 0 : _airports$find6.Country;\n      if (departureCountry && avoidCountries.includes(departureCountry)) {\n        setDepartureAirport('');\n      }\n    }\n    if (arrivalAirport) {\n      var _airports$find7;\n      const arrivalCountry = (_airports$find7 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find7 === void 0 ? void 0 : _airports$find7.Country;\n      if (arrivalCountry && avoidCountries.includes(arrivalCountry)) {\n        setArrivalAirport('');\n      }\n    }\n  }, [avoidCountries, departureAirport, arrivalAirport]);\n\n  // Update URL when form changes\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (departureAirport) params.set('from', departureAirport);\n    if (arrivalAirport) params.set('to', arrivalAirport);\n    if (avoidCountries.length > 0) params.set('avoid', avoidCountries.join(','));\n    if (maxSegments !== 4) params.set('max', maxSegments.toString()); // Only add if not default\n\n    const newUrl = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;\n    window.history.replaceState({}, '', newUrl);\n  }, [departureAirport, arrivalAirport, avoidCountries, maxSegments]);\n\n  // Read URL params on initial load\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const originParam = params.get('from');\n    const destParam = params.get('to');\n    const avoidParam = params.get('avoid');\n    const maxParam = params.get('max');\n    if (originParam) setDepartureAirport(originParam);\n    if (destParam) setArrivalAirport(destParam);\n    if (avoidParam) setAvoidCountries(avoidParam.split(','));\n    if (maxParam) {\n      const maxValue = parseInt(maxParam, 10);\n      if (!isNaN(maxValue) && maxValue >= 0 && maxValue <= 6) {\n        setMaxSegments(maxValue);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"airport-search\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-parameter departure-parameter\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontWeight: 700\n            },\n            children: \"Departure Airport:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n            className: \"select-input\",\n            cacheOptions: true,\n            defaultOptions: true,\n            value: departureAirport ? {\n              value: departureAirport,\n              label: ((_airports$find8 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find8 === void 0 ? void 0 : _airports$find8.IATA) + \" - \" + ((_airports$find9 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find9 === void 0 ? void 0 : _airports$find9.Name) + \" (\" + ((_airports$find10 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find10 === void 0 ? void 0 : _airports$find10.Country) + \")\"\n            } : null,\n            loadOptions: loadAirportOptions,\n            onChange: selected => setDepartureAirport(selected ? selected.value : ''),\n            isDisabled: isLoading,\n            placeholder: \"Select airports...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 985,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-parameter arrival-parameter\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontWeight: 700\n            },\n            children: \"Arrival Airport:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n            className: \"select-input\",\n            cacheOptions: true,\n            defaultOptions: true,\n            value: arrivalAirport ? {\n              value: arrivalAirport,\n              label: ((_airports$find11 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find11 === void 0 ? void 0 : _airports$find11.IATA) + \" - \" + ((_airports$find12 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find12 === void 0 ? void 0 : _airports$find12.Name) + \" (\" + ((_airports$find13 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find13 === void 0 ? void 0 : _airports$find13.Country) + \")\"\n            } : null,\n            loadOptions: loadAirportOptions,\n            onChange: selected => setArrivalAirport(selected ? selected.value : ''),\n            isDisabled: isLoading,\n            placeholder: \"Select airports...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-parameter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Avoid Countries:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n          isMulti: true,\n          className: \"select-input avoid-countries-select\",\n          cacheOptions: true,\n          defaultOptions: true,\n          value: avoidCountries.map(country => ({\n            value: country,\n            label: country\n          })),\n          loadOptions: loadCountryOptions,\n          onChange: selected => {\n            setAvoidCountries(selected ? selected.map(option => option.value) : []);\n          },\n          isDisabled: isLoading,\n          placeholder: \"Select countries...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-parameter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Avoid Airlines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1040,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n          isMulti: true,\n          className: \"select-input avoid-airlines-select\",\n          cacheOptions: true,\n          defaultOptions: airlines,\n          value: avoidAirlines.map(airline => {\n            var _airlines$find;\n            return {\n              value: airline,\n              label: ((_airlines$find = airlines.find(a => a.value === airline)) === null || _airlines$find === void 0 ? void 0 : _airlines$find.label) || airline\n            };\n          }),\n          loadOptions: loadAirlineOptions,\n          onChange: handleAvoidAirlinesChange,\n          isDisabled: isLoading,\n          placeholder: \"Select airlines...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1041,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-parameter max-segments-parameter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Maximum Segments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"6\",\n          value: maxSegments,\n          onChange: e => handleMaxSegmentsChange(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: handleSearch,\n        disabled: isLoading || !departureAirport || !arrivalAirport,\n        children: isLoading ? 'Searching...' : 'Search'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1066,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightResults, {\n      results: searchResults,\n      isVisible: showResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-text\",\n        children: \"Searching for routes...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1080,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 980,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchPage, \"bUnK2D6yXKgvPnI1Onl6WTtJKTI=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","FlightResults","UA_miles","SQ_miles","LH_miles","LX_miles","TG_miles","BR_miles","NH_miles","OS_miles","OZ_miles","NZ_miles","SA_miles","AI_miles","LO_miles","SN_miles","A3_miles","TP_miles","MS_miles","WY_miles","GF_miles","AC_miles","airports","getUniqueCountries","Select","AsyncSelect","useNavigate","useSearchParams","jsxDEV","_jsxDEV","COTERMINALS","getCoTerminalGroup","airport","group","Object","entries","includes","isValidCoTerminalRoute","newSegment","existingPath","allAirports","map","seg","Departure_IATA","Arrival_IATA","usedCoTerminals","Map","coTerminalGroup","has","get","set","EUROPEAN_COUNTRIES","Set","isRouteAvoidingCountries","route","avoidCountries","segment","departureAirport","find","a","IATA","arrivalAirport","Country","airlines","value","label","sort","b","localeCompare","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","sin","cos","c","atan2","sqrt","calculateRouteDistance","totalDistance","i","length","segmentDistance","Latitude","Longitude","HUB_EXCEPTIONS","isValidZoneProgression","path","_airports$find","_airports$find2","originZone","Zone","destZone","layoverZones","slice","_airports$find3","zone","SearchPage","_s","_airports$find8","_airports$find9","_airports$find10","_airports$find11","_airports$find12","_airports$find13","navigate","searchParams","setSearchParams","maxSegments","setMaxSegments","segments","parseInt","avoidAirlines","setAvoidAirlines","split","newParams","URLSearchParams","toString","delete","join","replace","handleMaxSegmentsChange","newValue","isNaN","handleAvoidAirlinesChange","selected","option","setDepartureAirport","setArrivalAirport","searchResults","setSearchResults","showResults","setShowResults","setAvoidCountries","isLoading","setIsLoading","countryOptions","calculateDirectDistance","origin","destination","originAirport","destAirport","findPossibleRoutes","visited","visitedCountries","directDistance","allRoutes","routes","isOriginNorthAmerica","isDestNorthAmerica","bothInNorthAmerica","northAmericaLayovers","reduce","count","layoverAirport","hubCount","nonHubCount","europeanLayovers","hasHub","total","sum","Distance","multiplier","currentPoint","currentAirport","getLayoverCountByCountry","currentPath","countByCountry","forEach","country","possibleSegments","filter","_airports$find4","_airports$find5","thisArrivalAirport","countryLayovers","nextCountry","connectZone","validZoneProgression","prevZone","currentZone","nextZone","isArrivalNorthAmerica","nextNonHubCount","nextHubCount","isEuropeanArrival","isEuropeanHub","newLayoverCount","isBacktrackingCountry","layoverCounts","arrivalCountry","currentCount","totalStops","currentTotalDistance","newVisited","add","newVisitedCountries","newPath","newRoutes","push","handleSearch","Promise","resolve","setTimeout","params","window","history","pushState","location","pathname","filteredRoutes","sortedRoutes","distanceA","distanceB","error","console","getAirportOptions","inputValue","input","toLowerCase","trim","exactIataMatches","startingIataMatches","startsWith","startingNameMatches","Name","containingNameMatches","allMatches","getCountryOptions","countries","exactMatches","startingMatches","progressiveMatches","countryChars","lastIndex","char","index","indexOf","filterCountries","containingMatches","loadCountryOptions","filterAirports","availableAirports","loadAirportOptions","filterAirlines","exactCodeMatches","airline","startingCodeMatches","nameMatches","loadAirlineOptions","_airports$find6","departureCountry","_airports$find7","newUrl","replaceState","search","originParam","destParam","avoidParam","maxParam","maxValue","className","children","style","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","cacheOptions","defaultOptions","loadOptions","onChange","isDisabled","placeholder","isMulti","_airlines$find","type","min","max","e","target","onClick","disabled","results","isVisible","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Documents/git/routebuilder/src/components/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';   \nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json'; \nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\nimport { getUniqueCountries } from '../utils/countryUtils';\nimport Select from 'react-select';\nimport AsyncSelect from 'react-select/async';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst COTERMINALS = {\n  // North America\n  'CHI': ['MDW', 'ORD'],\n  'DAL': ['DFW', 'DAL'],\n  'HOU': ['IAH', 'HOU'],\n  'NYC': ['JFK', 'LGA', 'EWR'],\n  'SFL': ['FLL', 'MIA', 'PBI'],\n  'YTO': ['YTZ', 'YHM', 'YYZ'],\n  'WAS': ['IAD', 'DCA'],\n  \n  // South America\n  'BUE': ['AEP', 'EZE'],\n  'RIO': ['GIG', 'SDU'],\n  'SAO': ['CGH', 'GRU', 'VCP'],\n  \n  // Europe\n  'IST': ['IST', 'SAW'],\n  'LON': ['LCY', 'LGW', 'LHR', 'LTN', 'STN'],\n  'MIL': ['BGY', 'LIN', 'MXP'],\n  'MOW': ['DME', 'SVO', 'VNO', 'ZIA'],\n  'PAR': ['CDG', 'ORY'],\n  'STO': ['ARN', 'BMA'],\n  \n  // Asia\n  'BJS': ['PEK', 'PKX'],\n  'JKT': ['CGK', 'HLP'],\n  'OSA': ['ITM', 'KIX', 'UKB'],\n  'SPK': ['CTS', 'OKD'],\n  'SEL': ['GMP', 'ICN'],\n  'SHA': ['SHA', 'PVG'],\n  'TPE': ['TSA', 'TPE'],\n  'TYO': ['HND', 'NRT']\n};\n\nfunction getCoTerminalGroup(airport) {\n  for (const [group, airports] of Object.entries(COTERMINALS)) {\n    if (airports.includes(airport)) {\n      return group;\n    }\n  }\n  return null;\n}\n\nfunction isValidCoTerminalRoute(newSegment, existingPath) {\n  const allAirports = [\n    ...existingPath.map(seg => seg.Departure_IATA),\n    ...existingPath.map(seg => seg.Arrival_IATA),\n    newSegment[\"Departure IATA\"],\n    newSegment[\"Arrival IATA\"]\n  ];\n  \n  const usedCoTerminals = new Map();\n  \n  for (const airport of allAirports) {\n    const coTerminalGroup = getCoTerminalGroup(airport);\n    if (coTerminalGroup) {\n      if (usedCoTerminals.has(coTerminalGroup)) {\n        // If we already used a different airport from this co-terminal group\n        if (usedCoTerminals.get(coTerminalGroup) !== airport) {\n          return false;\n        }\n      } else {\n        usedCoTerminals.set(coTerminalGroup, airport);\n      }\n    }\n  }\n  \n  return true;\n}\n\n// Constants for region restrictions\nconst EUROPEAN_COUNTRIES = new Set([\n  'Germany', 'United Kingdom', 'France', 'Italy', 'Spain', 'Poland', 'Ukraine', \n  'Romania', 'Netherlands', 'Belgium', 'Czechia', 'Sweden', 'Portugal', 'Greece',\n  'Hungary', 'Austria', 'Belarus', 'Switzerland', 'Bulgaria', 'Serbia', 'Denmark',\n  'Finland', 'Norway', 'Slovakia', 'Ireland', 'Croatia', 'Bosnia And Herzegovina',\n  'Moldova', 'Lithuania', 'Albania', 'Slovenia', 'Latvia', 'North Macedonia',\n  'Estonia', 'Luxembourg', 'Montenegro', 'Malta', 'Iceland'\n]);\n\n// First, let's create a helper function to check if a route avoids certain countries\nconst isRouteAvoidingCountries = (route, avoidCountries) => {\n  // Check each airport in the route\n  for (const segment of route) {\n    const departureAirport = airports.find(a => a.IATA === segment.Departure_IATA);\n    const arrivalAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    \n    // If any airport in the route is in an avoided country, return false\n    if (departureAirport && avoidCountries.includes(departureAirport.Country)) {\n      return false;\n    }\n    if (arrivalAirport && avoidCountries.includes(arrivalAirport.Country)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Create airlines list from your JSON imports\nconst airlines = [\n  { value: 'A3', label: 'Aegean Airlines (A3)' },\n  { value: 'AC', label: 'Air Canada (AC)' },\n  { value: 'AI', label: 'Air India (AI)' },\n  { value: 'NZ', label: 'Air New Zealand (NZ)' },\n  { value: 'NH', label: 'All Nippon Airways (NH)' },\n  { value: 'OZ', label: 'Asiana Airlines (OZ)' },\n  { value: 'OS', label: 'Austrian Airlines (OS)' },\n  { value: 'SN', label: 'Brussels Airlines (SN)' },\n  { value: 'MS', label: 'EgyptAir (MS)' },\n  { value: 'BR', label: 'EVA Air (BR)' },\n  { value: 'GF', label: 'Gulf Air (GF)' },\n  { value: 'LO', label: 'LOT Polish Airlines (LO)' },\n  { value: 'LH', label: 'Lufthansa (LH)' },\n  { value: 'WY', label: 'Oman Air (WY)' },\n  { value: 'SQ', label: 'Singapore Airlines (SQ)' },\n  { value: 'SA', label: 'South African Airways (SA)' },\n  { value: 'LX', label: 'Swiss International Air Lines (LX)' },\n  { value: 'TP', label: 'TAP Air Portugal (TP)' },\n  { value: 'TG', label: 'Thai Airways (TG)' },\n  { value: 'UA', label: 'United Airlines (UA)' }\n].sort((a, b) => a.label.localeCompare(b.label));\n\n// Helper function to calculate distance between two points using Haversine formula\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n\n// Calculate total distance for a route\nconst calculateRouteDistance = (route) => {\n  let totalDistance = 0;\n  \n  for (let i = 0; i < route.length; i++) {\n    const segment = route[i];\n    const departureAirport = airports.find(a => a.IATA === segment.Departure_IATA);\n    const arrivalAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    \n    if (departureAirport && arrivalAirport) {\n      const segmentDistance = calculateDistance(\n        departureAirport.Latitude,\n        departureAirport.Longitude,\n        arrivalAirport.Latitude,\n        arrivalAirport.Longitude\n      );\n      totalDistance += segmentDistance;\n    }\n  }\n  \n  return totalDistance;\n};\n\n// ===============================\n// Hub Airport Exceptions\n// ===============================\n\n// Airports exempt from standard layover restrictions\nconst HUB_EXCEPTIONS = new Set([\n  // Star Alliance Hubs\n  'ATH', // Aegean\n  'PEK', 'CTU', 'PVG', // Air China\n  'DEL', 'BOM', // Air India\n  'AKL', 'WLG', 'CHC', // Air New Zealand\n  'HND', 'NRT', 'KIX', // ANA\n  'ICN', 'GMP', // Asiana\n  'VIE', // Austrian\n  'BOG', 'MDE', 'UIO', 'GUA', 'SAL', // Avianca\n  'BRU', // Brussels\n  'PTY', // Copa\n  'ZAG', // Croatia\n  'CAI', // EgyptAir\n  'ADD', // Ethiopian\n  'TPE', // EVA\n  'WAW', // LOT\n  'FRA', 'MUC', // Lufthansa\n  'SZX', // Shenzhen\n  'SIN', // Singapore\n  'JNB', // South African\n  'ZRH', 'GVA', // SWISS\n  'LIS', 'OPO', // TAP\n  'BKK', // Thai\n  'IST', // Turkish\n  'ORD', 'DEN', 'IAH', 'LAX', 'EWR', 'SFO', 'IAD', // United\n  // Non-Alliance Hubs\n  'YVO', 'YUL', // Air Creebec\n  'MUC', 'FRA', // Air Dolomiti\n  'MRU', // Air Mauritius\n  'BEG', // Air Serbia\n  'VCP', 'CNF', 'REC', // Azul\n  'YWG', 'YTH', // Calm Air\n  'YZF', 'YFB', // Canadian North\n  'HKG', // Cathay Pacific\n  'FRA', // Discover\n  'ZRH', // Edelweiss\n  'AUH', // Etihad\n  'DUS', 'CGN', 'HAM', 'STR', // Eurowings\n  'GRU', 'GIG', 'BSB', // GOL\n  'BAH', // Gulf Air\n  'PVG', 'SHA', // Juneyao\n  'ATH', // Olympic\n  'MCT', // Oman Air\n  'YYT', 'YHZ', // PAL Airlines\n  'AYT', 'ADB', // SunExpress\n  'BNE', 'MEL', 'SYD' // Virgin Australia\n]);\n\n// Add this helper function near the top with other helper functions\nconst isValidZoneProgression = (path) => {\n  if (path.length <= 1) return true;\n  \n  // Get origin, destination, and layover zones\n  const originZone = airports.find(a => a.IATA === path[0].Departure_IATA)?.Zone;\n  const destZone = airports.find(a => a.IATA === path[path.length - 1].Arrival_IATA)?.Zone;\n  const layoverZones = new Set(path.slice(0, -1).map(segment => \n    airports.find(a => a.IATA === segment.Arrival_IATA)?.Zone\n  ));\n\n  // Rule 1: If origin and destination are in same zone, no third zone allowed\n  if (originZone === destZone) {\n    for (const zone of layoverZones) {\n      if (zone !== originZone) return false;\n    }\n    return true;\n  }\n\n  // Rule 2: North America <-> Atlantic: no Pacific layovers\n  if ((originZone === 'North America' && destZone === 'Atlantic') ||\n      (originZone === 'Atlantic' && destZone === 'North America')) {\n    if (layoverZones.has('Pacific')) return false;\n  }\n\n  // Rule 3: North America <-> South America: no Pacific or Atlantic layovers\n  if ((originZone === 'North America' && destZone === 'South America') ||\n      (originZone === 'South America' && destZone === 'North America')) {\n    if (layoverZones.has('Pacific') || layoverZones.has('Atlantic')) return false;\n  }\n\n  return true;\n};\n\nexport function SearchPage() {\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Initialize state from URL params\n  const [maxSegments, setMaxSegments] = useState(() => {\n    const segments = searchParams.get('maxSegments');\n    return segments ? parseInt(segments, 10) : 4;\n  });\n\n  const [avoidAirlines, setAvoidAirlines] = useState(() => {\n    const airlines = searchParams.get('avoidAirlines');\n    return airlines ? airlines.split(',') : [];\n  });\n\n  // Update URL when params change\n  useEffect(() => {\n    const newParams = new URLSearchParams(searchParams);\n    \n    // Update maxSegments\n    if (maxSegments !== 4) {\n      newParams.set('maxSegments', maxSegments.toString());\n    } else {\n      newParams.delete('maxSegments');\n    }\n    \n    // Update avoidAirlines\n    if (avoidAirlines.length > 0) {\n      newParams.set('avoidAirlines', avoidAirlines.join(','));\n    } else {\n      newParams.delete('avoidAirlines');\n    }\n    \n    // Update URL without reloading\n    navigate(`?${newParams.toString()}`, { replace: true });\n  }, [maxSegments, avoidAirlines]);\n\n  // Update handlers\n  const handleMaxSegmentsChange = (value) => {\n    const newValue = parseInt(value, 10);\n    if (!isNaN(newValue) && newValue >= 0 && newValue <= 6) {\n      setMaxSegments(newValue);\n    }\n  };\n\n  const handleAvoidAirlinesChange = (selected) => {\n    setAvoidAirlines(selected ? selected.map(option => option.value) : []);\n  };\n\n  // State for selected airports and search results\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [avoidCountries, setAvoidCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get the country options when component mounts\n  const countryOptions = useMemo(() => {\n    return getUniqueCountries(airports);\n  }, []);\n\n  // Calculates direct distance between airports using Haversine formula\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    \n    if (!originAirport || !destAirport) return null;\n\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n             Math.cos(lat1) * Math.cos(lat2) *\n             Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  // Recursive function to find all valid routes between origin and destination\n  // Constraints:\n  // - Maximum 4 segments (3 stops)\n  // - Total distance <= 2x direct distance\n  // - No revisiting airports\n  // - No backtracking to previously visited countries (except direct connections)\n  // - Maximum 2 layovers in US/Canada unless both origin and destination are in US/Canada\n  const findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n    // Create filtered allRoutes based on avoided airlines\n    const allRoutes = [\n      ...(avoidAirlines.includes('UA') ? [] : UA_miles),\n      ...(avoidAirlines.includes('SQ') ? [] : SQ_miles),\n      ...(avoidAirlines.includes('LH') ? [] : LH_miles),\n      ...(avoidAirlines.includes('LX') ? [] : LX_miles),\n      ...(avoidAirlines.includes('TG') ? [] : TG_miles),\n      ...(avoidAirlines.includes('BR') ? [] : BR_miles),\n      ...(avoidAirlines.includes('NH') ? [] : NH_miles),\n      ...(avoidAirlines.includes('OS') ? [] : OS_miles),\n      ...(avoidAirlines.includes('OZ') ? [] : OZ_miles),\n      ...(avoidAirlines.includes('NZ') ? [] : NZ_miles),\n      ...(avoidAirlines.includes('SA') ? [] : SA_miles),\n      ...(avoidAirlines.includes('AI') ? [] : AI_miles),\n      ...(avoidAirlines.includes('LO') ? [] : LO_miles),\n      ...(avoidAirlines.includes('SN') ? [] : SN_miles),\n      ...(avoidAirlines.includes('A3') ? [] : A3_miles),\n      ...(avoidAirlines.includes('TP') ? [] : TP_miles),\n      ...(avoidAirlines.includes('MS') ? [] : MS_miles),\n      ...(avoidAirlines.includes('WY') ? [] : WY_miles),\n      ...(avoidAirlines.includes('GF') ? [] : GF_miles),\n      ...(avoidAirlines.includes('AC') ? [] : AC_miles)\n    ];\n\n    const routes = [];\n\n    // Get origin and destination airport details for US/Canada check\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    const isOriginNorthAmerica = ['United States', 'Canada'].includes(originAirport?.Country);\n    const isDestNorthAmerica = ['United States', 'Canada'].includes(destAirport?.Country);\n    const bothInNorthAmerica = isOriginNorthAmerica && isDestNorthAmerica;\n\n    // Count existing North American layovers, treating non-hubs and hubs separately\n    const northAmericaLayovers = path.reduce((count, segment) => {\n      const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      if (!layoverAirport || !['United States', 'Canada'].includes(layoverAirport.Country)) {\n        return count;\n      }\n      \n      if (HUB_EXCEPTIONS.has(segment.Arrival_IATA)) {\n        return { ...count, hubCount: 1 };  // All hubs count as 1 total\n      }\n      return { ...count, nonHubCount: count.nonHubCount + 1 };  // Each non-hub counts as 1\n    }, { nonHubCount: 0, hubCount: 0 });\n\n    // Count existing European layovers in the current path\n    const europeanLayovers = path.reduce((count, segment) => {\n      const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      if (!layoverAirport || !EUROPEAN_COUNTRIES.has(layoverAirport.Country)) {\n        return count;\n      }\n      \n      // If it's a hub airport, we've already counted hubs, don't increment\n      if (HUB_EXCEPTIONS.has(segment.Arrival_IATA)) {\n        return count + (count.hasHub ? 0 : 1);  // Only count hubs once total\n      }\n      \n      // Non-hub European airports count as 1 each\n      return count + 1;\n    }, { total: 0, hasHub: false });\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n      const multiplier = 2 + (path.length - 1) * 0.2; // 2.0x for 1 stop, 2.2x for 2 stops, etc.\n      if (totalDistance <= directDistance * multiplier) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 6 segments (5 stops)\n    if (path.length >= maxSegments) {\n      return [];\n    }\n\n    // Get current point and its country\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    const currentAirport = airports.find(a => a.IATA === currentPoint);\n    \n    if (!currentAirport) return [];\n\n    // Add helper function to count layovers by country\n    const getLayoverCountByCountry = (currentPath) => {\n      const countByCountry = {};\n      currentPath.forEach(segment => {\n        const airport = airports.find(a => a.IATA === segment.Arrival_IATA);\n        if (!airport) return;\n        \n        const country = airport.Country;\n        if (!countByCountry[country]) {\n          countByCountry[country] = { nonHubCount: 0, hasHub: false };\n        }\n        \n        if (HUB_EXCEPTIONS.has(segment.Arrival_IATA)) {\n          countByCountry[country].hasHub = true;\n        } else {\n          countByCountry[country].nonHubCount += 1;\n        }\n      });\n      return countByCountry;\n    };\n\n    const possibleSegments = allRoutes.filter(route => {\n      if (route[\"Departure IATA\"] !== currentPoint) return false;\n\n      // Get origin and destination countries\n      const originAirport = airports.find(a => a.IATA === origin);\n      const destAirport = airports.find(a => a.IATA === destination);\n      const thisArrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      \n      if (!originAirport || !destAirport || !thisArrivalAirport) return false;\n\n      // Check for multiple layovers in same country\n      const countryLayovers = getLayoverCountByCountry(path);\n      const nextCountry = thisArrivalAirport.Country;\n      \n      // Allow multiple stops only if it's origin or destination country\n      if (nextCountry !== originAirport.Country && \n          nextCountry !== destAirport.Country && \n          countryLayovers[nextCountry] >= 1 &&\n          !HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n        return false;\n      }\n\n      // Get zones\n      const originZone = airports.find(a => a.IATA === origin)?.Zone;\n      const destZone = airports.find(a => a.IATA === destination)?.Zone;\n      const connectZone = thisArrivalAirport?.Zone;\n\n      // Allow progressive zone changes\n      const validZoneProgression = (path) => {\n        for (let i = 1; i < path.length - 1; i++) {\n          const prevZone = airports.find(a => a.IATA === path[i-1][\"Departure IATA\"]).Zone;\n          const currentZone = airports.find(a => a.IATA === path[i][\"Departure IATA\"]).Zone;\n          const nextZone = airports.find(a => a.IATA === path[i+1][\"Departure IATA\"]).Zone;\n          \n          // Allow staying in same zone or moving forward\n          if (currentZone !== prevZone && currentZone !== nextZone) {\n            // Only allow backtracking through hubs\n            if (!HUB_EXCEPTIONS.has(path[i][\"Departure IATA\"])) {\n              return false;\n            }\n          }\n        }\n        return true;\n      };\n\n      // Rule: When flying between two zones, cannot connect via a third zone\n      // Example: North America to Atlantic cannot connect via Pacific\n      if (!isValidZoneProgression(path, route)) {\n        return false;\n      }\n\n      // Add co-terminal validation\n      if (!isValidCoTerminalRoute(route, path)) {\n        return false;\n      }\n      \n      // Get the arrival airport details\n      const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      if (!arrivalAirport) return false;\n\n      // Check if adding this segment would exceed US/Canada layover limit\n      const isArrivalNorthAmerica = ['United States', 'Canada'].includes(arrivalAirport.Country);\n      if (isArrivalNorthAmerica && !bothInNorthAmerica) {\n        let nextNonHubCount = northAmericaLayovers.nonHubCount;\n        let nextHubCount = northAmericaLayovers.hubCount;\n\n        if (HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n          nextHubCount = 1;\n        } else {\n          nextNonHubCount += 1;\n        }\n\n        // Total layovers = non-hub count + hub count (all hubs count as 1)\n        if (nextNonHubCount + nextHubCount > 2) {\n          return false;\n        }\n      }\n\n      // Check if adding this segment would exceed European layover limit\n      const isEuropeanArrival = EUROPEAN_COUNTRIES.has(arrivalAirport.Country);\n      const isEuropeanHub = HUB_EXCEPTIONS.has(route[\"Arrival IATA\"]);\n      \n      if (isEuropeanArrival) {\n        let newLayoverCount = europeanLayovers;\n        if (isEuropeanHub && !europeanLayovers.hasHub) {\n          newLayoverCount += 1;  // First hub encounter counts as 1\n        } else if (!isEuropeanHub) {\n          newLayoverCount += 1;  // Non-hub counts as 1\n        }\n        if (newLayoverCount > 2) {\n          return false;\n        }\n      }\n\n      // Check if we're not backtracking to a visited airport\n      if (visited.has(route[\"Arrival IATA\"])) return false;\n\n      // Check if we're not backtracking to a visited country\n      // Exception: Allow same country connection if it's a direct continuation\n      const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) &&\n                                  arrivalAirport.Country !== currentAirport.Country;\n      if (isBacktrackingCountry) return false;\n\n      // Rule: Maximum 1 layover per transit country (with hub exceptions)\n      const layoverCounts = getLayoverCountByCountry(path);\n      const arrivalCountry = arrivalAirport.Country;\n      if (arrivalCountry !== originAirport.Country && \n          arrivalCountry !== destAirport.Country && \n          layoverCounts[arrivalCountry] >= 1 &&\n          !HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) { // Add exception check\n        return false;\n      }\n\n      // Rule: Maximum 2 stops in Europe (with hub exceptions)\n      if (isEuropeanArrival && \n          europeanLayovers >= 2 &&\n          !HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) { // Add exception check\n        return false;\n      }\n\n      // Check if adding this stop would exceed country limit\n      if (nextCountry !== originAirport.Country && nextCountry !== destAirport.Country) {\n        const currentCount = countryLayovers[nextCountry] || { nonHubCount: 0, hasHub: false };\n        let totalStops = currentCount.nonHubCount;\n        if (currentCount.hasHub || HUB_EXCEPTIONS.has(route[\"Arrival IATA\"])) {\n          totalStops += 1; // All hubs in country count as 1 total\n        }\n        if (totalStops >= 2) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n      \n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + \n                               segment[\"Flight Distance (miles)\"];\n      \n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n\n      // Update visited sets\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n      \n      const newVisitedCountries = new Set(visitedCountries);\n      newVisitedCountries.add(arrivalAirport.Country);\n\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"],\n        Country: arrivalAirport.Country // Add country info for reference\n      }];\n\n      const newRoutes = findPossibleRoutes(\n        origin,\n        destination,\n        newVisited,\n        newVisitedCountries,\n        newPath,\n        directDistance\n      );\n\n      routes.push(...newRoutes);\n    }\n\n    return routes;\n  };\n\n  // Handles the search button click\n  // Updates URL parameters and finds possible routes\n  const handleSearch = async () => {\n    // Show loading overlay immediately\n    setIsLoading(true);\n    setShowResults(false);\n\n    try {\n      // Wait for 250ms to ensure overlay is visible\n      await new Promise(resolve => setTimeout(resolve, 250));\n\n      if (departureAirport && arrivalAirport) {\n        const params = new URLSearchParams();\n        params.set('from', departureAirport);\n        params.set('to', arrivalAirport);\n        params.set('avoidCountries', avoidCountries.join(','));\n        \n        window.history.pushState(\n          {}, \n          '', \n          `${window.location.pathname}?${params.toString()}`\n        );\n        \n        const originAirport = airports.find(a => a.IATA === departureAirport);\n        const visited = new Set([departureAirport]);\n        const visitedCountries = new Set([originAirport.Country]);\n        \n        const routes = findPossibleRoutes(\n          departureAirport, \n          arrivalAirport, \n          visited,\n          visitedCountries\n        );\n        \n        // Filter out routes that go through avoided countries\n        const filteredRoutes = routes.filter(route => \n          isRouteAvoidingCountries(route, avoidCountries)\n        );\n        \n        // Sort routes by total distance\n        const sortedRoutes = filteredRoutes.sort((a, b) => {\n          const distanceA = calculateRouteDistance(a);\n          const distanceB = calculateRouteDistance(b);\n          return distanceA - distanceB; // Low to high\n        });\n        \n        setSearchResults(sortedRoutes);\n        setShowResults(true);\n      }\n    } catch (error) {\n      console.error('Error searching routes:', error);\n    } finally {\n      // Add a small delay before hiding loading screen for smoother transition\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setIsLoading(false);\n    }\n  };\n\n  // Airport search with better IATA and name prioritization\n  const getAirportOptions = (inputValue) => {\n    if (!inputValue) return [];\n    \n    const input = inputValue.toLowerCase().trim();\n    \n    // Priority 1: Exact IATA match\n    const exactIataMatches = airports.filter(airport => \n      airport.IATA.toLowerCase() === input\n    );\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = airports.filter(airport => \n      airport.IATA.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport)\n    );\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = airports.filter(airport => \n      airport.Name.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport)\n    );\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = airports.filter(airport => \n      airport.Name.toLowerCase().includes(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport) &&\n      !startingNameMatches.includes(airport)\n    );\n\n    // Combine all matches with proper ordering\n    const allMatches = [\n      ...exactIataMatches,\n      ...startingIataMatches,\n      ...startingNameMatches,\n      ...containingNameMatches\n    ].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n\n  // Country search with progressive character matching\n  const getCountryOptions = (inputValue) => {\n    if (!inputValue) return [];\n\n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n    \n    // First: Exact matches\n    const exactMatches = countries.filter(country => \n      country.toLowerCase() === input\n    );\n\n    // Second: Starting matches (progressive matching)\n    const startingMatches = countries.filter(country => \n      country.toLowerCase().startsWith(input) &&\n      !exactMatches.includes(country)\n    );\n\n    // Third: Progressive character matching\n    const progressiveMatches = countries.filter(country => {\n      if (exactMatches.includes(country) || startingMatches.includes(country)) {\n        return false;\n      }\n      \n      const countryChars = country.toLowerCase();\n      let lastIndex = -1;\n      \n      // Check if characters appear in sequence\n      for (const char of input) {\n        const index = countryChars.indexOf(char, lastIndex + 1);\n        if (index === -1) return false;\n        lastIndex = index;\n      }\n      \n      return true;\n    });\n\n    // Combine all matches with proper ordering\n    const allMatches = [\n      ...exactMatches,\n      ...startingMatches,\n      ...progressiveMatches\n    ].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(country => ({\n      value: country,\n      label: country\n    }));\n  };\n\n  const filterCountries = (inputValue) => {\n    if (!inputValue) return [];\n    \n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n    \n    // Priority 1: Exact matches\n    const exactMatches = countries.filter(country => \n      country.toLowerCase() === input\n    );\n\n    // Priority 2: Starts with input\n    const startingMatches = countries.filter(country => \n      country.toLowerCase().startsWith(input) &&\n      !exactMatches.includes(country)\n    );\n\n    // Priority 3: Contains input\n    const containingMatches = countries.filter(country => \n      country.toLowerCase().includes(input) &&\n      !exactMatches.includes(country) &&\n      !startingMatches.includes(country)\n    );\n\n    return [...exactMatches, ...startingMatches, ...containingMatches]\n      .slice(0, 5)\n      .map(country => ({\n        value: country,\n        label: country\n      }));\n  };\n\n  const loadCountryOptions = (inputValue) => \n    new Promise((resolve) => {\n      resolve(filterCountries(inputValue));\n    });\n\n  const filterAirports = (inputValue) => {\n    if (!inputValue) return [];\n    \n    const input = inputValue.toLowerCase().trim();\n    \n    // Filter out airports from avoided countries first\n    const availableAirports = airports.filter(airport => \n      !avoidCountries.includes(airport.Country)\n    );\n    \n    // Priority 1: Exact IATA match\n    const exactIataMatches = availableAirports.filter(airport => \n      airport.IATA.toLowerCase() === input\n    );\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = availableAirports.filter(airport => \n      airport.IATA.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport)\n    );\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = availableAirports.filter(airport => \n      airport.Name.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport)\n    );\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = availableAirports.filter(airport => \n      airport.Name.toLowerCase().includes(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport) &&\n      !startingNameMatches.includes(airport)\n    );\n\n    // Combine all matches with proper ordering\n    const allMatches = [\n      ...exactIataMatches,\n      ...startingIataMatches,\n      ...startingNameMatches,\n      ...containingNameMatches\n    ].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n\n  const loadAirportOptions = (inputValue) => \n    new Promise((resolve) => {\n      resolve(filterAirports(inputValue));\n    });\n\n  // Filter airlines function\n  const filterAirlines = (inputValue) => {\n    if (!inputValue) return airlines;\n    \n    const input = inputValue.toLowerCase().trim();\n    \n    // Priority 1: Exact airline code match\n    const exactCodeMatches = airlines.filter(airline => \n      airline.value.toLowerCase() === input\n    );\n\n    // Priority 2: Starting airline code match\n    const startingCodeMatches = airlines.filter(airline => \n      airline.value.toLowerCase().startsWith(input) &&\n      !exactCodeMatches.includes(airline)\n    );\n\n    // Priority 3: Airline name contains input\n    const nameMatches = airlines.filter(airline => \n      airline.label.toLowerCase().includes(input) &&\n      !exactCodeMatches.includes(airline) &&\n      !startingCodeMatches.includes(airline)\n    );\n\n    return [...exactCodeMatches, ...startingCodeMatches, ...nameMatches];\n  };\n\n  const loadAirlineOptions = (inputValue) => \n    new Promise((resolve) => {\n      resolve(filterAirlines(inputValue));\n    });\n\n  // Also clear selected airports if their country is now avoided\n  useEffect(() => {\n    if (departureAirport) {\n      const departureCountry = airports.find(a => a.IATA === departureAirport)?.Country;\n      if (departureCountry && avoidCountries.includes(departureCountry)) {\n        setDepartureAirport('');\n      }\n    }\n    \n    if (arrivalAirport) {\n      const arrivalCountry = airports.find(a => a.IATA === arrivalAirport)?.Country;\n      if (arrivalCountry && avoidCountries.includes(arrivalCountry)) {\n        setArrivalAirport('');\n      }\n    }\n  }, [avoidCountries, departureAirport, arrivalAirport]);\n\n  // Update URL when form changes\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (departureAirport) params.set('from', departureAirport);\n    if (arrivalAirport) params.set('to', arrivalAirport);\n    if (avoidCountries.length > 0) params.set('avoid', avoidCountries.join(','));\n    if (maxSegments !== 4) params.set('max', maxSegments.toString()); // Only add if not default\n    \n    const newUrl = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;\n    window.history.replaceState({}, '', newUrl);\n  }, [departureAirport, arrivalAirport, avoidCountries, maxSegments]);\n\n  // Read URL params on initial load\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const originParam = params.get('from');\n    const destParam = params.get('to');\n    const avoidParam = params.get('avoid');\n    const maxParam = params.get('max');\n\n    if (originParam) setDepartureAirport(originParam);\n    if (destParam) setArrivalAirport(destParam);\n    if (avoidParam) setAvoidCountries(avoidParam.split(','));\n    if (maxParam) {\n      const maxValue = parseInt(maxParam, 10);\n      if (!isNaN(maxValue) && maxValue >= 0 && maxValue <= 6) {\n        setMaxSegments(maxValue);\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-boxes\">\n        <div className=\"airport-search\">\n          <div className=\"search-parameter departure-parameter\">\n            <label style={{ fontWeight: 700 }}>Departure Airport:</label>\n            <AsyncSelect\n              className=\"select-input\"\n              cacheOptions\n              defaultOptions\n              value={departureAirport ? {\n                value: departureAirport,\n                label: airports.find(a => a.IATA === departureAirport)?.IATA + \n                  \" - \" + airports.find(a => a.IATA === departureAirport)?.Name +\n                  \" (\" + airports.find(a => a.IATA === departureAirport)?.Country + \")\"\n              } : null}\n              loadOptions={loadAirportOptions}\n              onChange={(selected) => setDepartureAirport(selected ? selected.value : '')}\n              isDisabled={isLoading}\n              placeholder=\"Select airports...\"\n            />\n          </div>\n          <div className=\"search-parameter arrival-parameter\">\n            <label style={{ fontWeight: 700 }}>Arrival Airport:</label>\n            <AsyncSelect\n              className=\"select-input\"\n              cacheOptions\n              defaultOptions\n              value={arrivalAirport ? {\n                value: arrivalAirport,\n                label: airports.find(a => a.IATA === arrivalAirport)?.IATA + \n                  \" - \" + airports.find(a => a.IATA === arrivalAirport)?.Name +\n                  \" (\" + airports.find(a => a.IATA === arrivalAirport)?.Country + \")\"\n              } : null}\n              loadOptions={loadAirportOptions}\n              onChange={(selected) => setArrivalAirport(selected ? selected.value : '')}\n              isDisabled={isLoading}\n              placeholder=\"Select airports...\"\n            />\n          </div>\n        </div>\n        <div className=\"search-parameter\">\n          <label>Avoid Countries:</label>\n          <AsyncSelect\n            isMulti\n            className=\"select-input avoid-countries-select\"\n            cacheOptions\n            defaultOptions\n            value={avoidCountries.map(country => ({\n              value: country,\n              label: country\n            }))}\n            loadOptions={loadCountryOptions}\n            onChange={(selected) => {\n              setAvoidCountries(selected ? selected.map(option => option.value) : []);\n            }}\n            isDisabled={isLoading}\n            placeholder=\"Select countries...\"\n          />\n        </div>\n        <div className=\"search-parameter\">\n          <label>Avoid Airlines:</label>\n          <AsyncSelect\n            isMulti\n            className=\"select-input avoid-airlines-select\"\n            cacheOptions\n            defaultOptions={airlines}\n            value={avoidAirlines.map(airline => ({\n              value: airline,\n              label: airlines.find(a => a.value === airline)?.label || airline\n            }))}\n            loadOptions={loadAirlineOptions}\n            onChange={handleAvoidAirlinesChange}\n            isDisabled={isLoading}\n            placeholder=\"Select airlines...\"\n          />\n        </div>\n        <div className=\"search-parameter max-segments-parameter\">\n          <label>Maximum Segments</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"6\"\n            value={maxSegments}\n            onChange={(e) => handleMaxSegmentsChange(e.target.value)}\n          />\n        </div>\n        <button \n          className=\"search-button\"\n          onClick={handleSearch}\n          disabled={isLoading || !departureAirport || !arrivalAirport}\n        >\n          {isLoading ? 'Searching...' : 'Search'}\n        </button>\n      </div>\n      <FlightResults \n        results={searchResults} \n        isVisible={showResults}\n      />\n      \n      {isLoading && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\"></div>\n          <div className=\"loading-text\">Searching for routes...</div>\n        </div>\n      )}\n    </div>\n  );\n} \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}