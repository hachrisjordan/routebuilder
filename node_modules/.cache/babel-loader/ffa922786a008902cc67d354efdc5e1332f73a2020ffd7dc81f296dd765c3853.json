{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Documents/git/routebuilder/src/components/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';\nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json';\nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\nimport { getUniqueCountries } from '../utils/countryUtils';\nimport Select from 'react-select';\nimport AsyncSelect from 'react-select/async';\n\n// ===============================\n// Constants and Configuration\n// ===============================\n\n// Co-terminal airport groups organized by region\n// These are airports that serve the same city/area and count as one stop\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COTERMINALS = {\n  // North America co-terminals (major city airport systems)\n  'CHI': ['MDW', 'ORD'],\n  // Chicago: Midway and O'Hare\n  'DAL': ['DFW', 'DAL'],\n  // Dallas: DFW and Love Field\n  // ... other co-terminals\n\n  // European co-terminal groups\n  'LON': ['LCY', 'LGW', 'LHR', 'LTN', 'STN'],\n  // London's five airports\n  'PAR': ['CDG', 'ORY'],\n  // Paris: Charles de Gaulle and Orly\n\n  // Asian co-terminal groups\n  'TYO': ['HND', 'NRT'],\n  // Tokyo: Haneda and Narita\n  'SEL': ['GMP', 'ICN'] // Seoul: Gimpo and Incheon\n};\n\n// Set of European countries for regional layover restrictions\n// Used to enforce maximum 2 stops in Europe rule\nconst EUROPEAN_COUNTRIES = new Set(['Germany', 'United Kingdom', 'France'\n// ... other European countries\n]);\n\n// ===============================\n// Helper Functions\n// ===============================\n\n/**\n * Finds which co-terminal group an airport belongs to\n * @param {string} airport - IATA code of the airport\n * @returns {string|null} - Co-terminal group code or null if not in any group\n */\nfunction getCoTerminalGroup(airport) {\n  for (const [group, airports] of Object.entries(COTERMINALS)) {\n    if (airports.includes(airport)) {\n      return group;\n    }\n  }\n  return null;\n}\n\n/**\n * Validates that a route doesn't use multiple airports from the same co-terminal group\n * Example: Can't use both LHR and LGW in the same itinerary\n * @param {Object} newSegment - The new flight segment being considered\n * @param {Array} existingPath - Current path of flight segments\n * @returns {boolean} - True if co-terminal rules are satisfied\n */\nfunction isValidCoTerminalRoute(newSegment, existingPath) {\n  const allAirports = [...existingPath.map(seg => seg.Departure_IATA), ...existingPath.map(seg => seg.Arrival_IATA), newSegment[\"Departure IATA\"], newSegment[\"Arrival IATA\"]];\n  const usedCoTerminals = new Map();\n  for (const airport of allAirports) {\n    const coTerminalGroup = getCoTerminalGroup(airport);\n    if (coTerminalGroup) {\n      if (usedCoTerminals.has(coTerminalGroup)) {\n        // If we already used a different airport from this co-terminal group\n        if (usedCoTerminals.get(coTerminalGroup) !== airport) {\n          return false;\n        }\n      } else {\n        usedCoTerminals.set(coTerminalGroup, airport);\n      }\n    }\n  }\n  return true;\n}\n\n// ===============================\n// Route Finding Core Logic\n// ===============================\n\n/**\n * Main recursive function to find all valid routes between two airports\n * Implements Aeroplan routing rules:\n * 1. Maximum 4 segments\n * 2. No more than 2 connections in Europe/North America\n * 3. No backtracking to previously visited countries\n * 4. Total distance <= 2x direct distance\n * 5. Co-terminal restrictions\n */\nconst findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n  // Create filtered allRoutes based on avoided airlines\n  const allRoutes = [...(avoidAirlines.includes('UA') ? [] : UA_miles), ...(avoidAirlines.includes('SQ') ? [] : SQ_miles), ...(avoidAirlines.includes('LH') ? [] : LH_miles), ...(avoidAirlines.includes('LX') ? [] : LX_miles), ...(avoidAirlines.includes('TG') ? [] : TG_miles), ...(avoidAirlines.includes('BR') ? [] : BR_miles), ...(avoidAirlines.includes('NH') ? [] : NH_miles), ...(avoidAirlines.includes('OS') ? [] : OS_miles), ...(avoidAirlines.includes('OZ') ? [] : OZ_miles), ...(avoidAirlines.includes('NZ') ? [] : NZ_miles), ...(avoidAirlines.includes('SA') ? [] : SA_miles), ...(avoidAirlines.includes('AI') ? [] : AI_miles), ...(avoidAirlines.includes('LO') ? [] : LO_miles), ...(avoidAirlines.includes('SN') ? [] : SN_miles), ...(avoidAirlines.includes('A3') ? [] : A3_miles), ...(avoidAirlines.includes('TP') ? [] : TP_miles), ...(avoidAirlines.includes('MS') ? [] : MS_miles), ...(avoidAirlines.includes('WY') ? [] : WY_miles), ...(avoidAirlines.includes('GF') ? [] : GF_miles), ...(avoidAirlines.includes('AC') ? [] : AC_miles)];\n  const routes = [];\n\n  // Get origin and destination airport details for US/Canada check\n  const originAirport = airports.find(a => a.IATA === origin);\n  const destAirport = airports.find(a => a.IATA === destination);\n  const isOriginNorthAmerica = ['United States', 'Canada'].includes(originAirport === null || originAirport === void 0 ? void 0 : originAirport.Country);\n  const isDestNorthAmerica = ['United States', 'Canada'].includes(destAirport === null || destAirport === void 0 ? void 0 : destAirport.Country);\n  const bothInNorthAmerica = isOriginNorthAmerica && isDestNorthAmerica;\n\n  // Count existing US/Canada layovers in the current path\n  const northAmericaLayovers = path.reduce((count, segment) => {\n    const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    return count + (['United States', 'Canada'].includes(layoverAirport === null || layoverAirport === void 0 ? void 0 : layoverAirport.Country) ? 1 : 0);\n  }, 0);\n\n  // Count existing European layovers in the current path\n  const europeanLayovers = path.reduce((count, segment) => {\n    const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    return count + (EUROPEAN_COUNTRIES.has(layoverAirport === null || layoverAirport === void 0 ? void 0 : layoverAirport.Country) ? 1 : 0);\n  }, 0);\n\n  // Calculate direct distance if not provided\n  if (directDistance === null) {\n    directDistance = calculateDirectDistance(origin, destination);\n    if (!directDistance) return [];\n  }\n\n  // Base case: if we've found a path to the destination\n  if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n    const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n    if (totalDistance <= directDistance * 2) {\n      return [path];\n    }\n    return [];\n  }\n\n  // Don't allow paths longer than 6 segments (5 stops)\n  if (path.length >= 4) {\n    return [];\n  }\n\n  // Get current point and its country\n  const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n  const currentAirport = airports.find(a => a.IATA === currentPoint);\n  if (!currentAirport) return [];\n\n  // Add helper function to count layovers by country\n  const getLayoverCountByCountry = currentPath => {\n    const countByCountry = {};\n    currentPath.forEach(segment => {\n      const airport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      if (airport) {\n        countByCountry[airport.Country] = (countByCountry[airport.Country] || 0) + 1;\n      }\n    });\n    return countByCountry;\n  };\n  const possibleSegments = allRoutes.filter(route => {\n    var _airports$find, _airports$find2, _airports$find3;\n    if (route[\"Departure IATA\"] !== currentPoint) return false;\n\n    // Get origin and destination countries\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    const thisArrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n    if (!originAirport || !destAirport || !thisArrivalAirport) return false;\n\n    // Check for multiple layovers in same country\n    const layoverCounts = getLayoverCountByCountry(path);\n    const arrivalCountry = thisArrivalAirport.Country;\n\n    // Allow multiple stops only if it's origin or destination country\n    if (arrivalCountry !== originAirport.Country && arrivalCountry !== destAirport.Country && layoverCounts[arrivalCountry] >= 1) {\n      return false;\n    }\n\n    // Get zones\n    const originZone = (_airports$find = airports.find(a => a.IATA === origin)) === null || _airports$find === void 0 ? void 0 : _airports$find.Zone;\n    const destZone = (_airports$find2 = airports.find(a => a.IATA === destination)) === null || _airports$find2 === void 0 ? void 0 : _airports$find2.Zone;\n    const arrivalZone = (_airports$find3 = airports.find(a => a.IATA === route[\"Arrival IATA\"])) === null || _airports$find3 === void 0 ? void 0 : _airports$find3.Zone;\n\n    // If origin and destination are in same zone, prevent connections through different zones\n    if (originZone === destZone && arrivalZone !== originZone) {\n      return false;\n    }\n\n    // Add co-terminal validation\n    if (!isValidCoTerminalRoute(route, path)) {\n      return false;\n    }\n\n    // Get the arrival airport details\n    const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n    if (!arrivalAirport) return false;\n\n    // Check if adding this segment would exceed US/Canada layover limit\n    const isArrivalNorthAmerica = ['United States', 'Canada'].includes(arrivalAirport.Country);\n    if (isArrivalNorthAmerica && !bothInNorthAmerica && northAmericaLayovers >= 2) {\n      return false;\n    }\n\n    // Check if adding this segment would exceed European layover limit\n    const isEuropeanArrival = EUROPEAN_COUNTRIES.has(arrivalAirport.Country);\n    if (isEuropeanArrival && europeanLayovers >= 2) {\n      return false;\n    }\n\n    // Check if we're not backtracking to a visited airport\n    if (visited.has(route[\"Arrival IATA\"])) return false;\n\n    // Check if we're not backtracking to a visited country\n    // Exception: Allow same country connection if it's a direct continuation\n    const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) && arrivalAirport.Country !== currentAirport.Country;\n    if (isBacktrackingCountry) return false;\n    return true;\n  });\n\n  // Try each possible next segment\n  for (const segment of possibleSegments) {\n    const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n\n    // Calculate running total distance\n    const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + segment[\"Flight Distance (miles)\"];\n\n    // Skip this path if it's already over 2x direct distance\n    if (currentTotalDistance > directDistance * 2) {\n      continue;\n    }\n\n    // Update visited sets\n    const newVisited = new Set(visited);\n    newVisited.add(segment[\"Arrival IATA\"]);\n    const newVisitedCountries = new Set(visitedCountries);\n    newVisitedCountries.add(arrivalAirport.Country);\n    const newPath = [...path, {\n      Departure_IATA: segment[\"Departure IATA\"],\n      Arrival_IATA: segment[\"Arrival IATA\"],\n      Distance: segment[\"Flight Distance (miles)\"],\n      Country: arrivalAirport.Country // Add country info for reference\n    }];\n    const newRoutes = findPossibleRoutes(origin, destination, newVisited, newVisitedCountries, newPath, directDistance);\n    routes.push(...newRoutes);\n  }\n  return routes;\n};\n\n// ===============================\n// Distance Calculation Functions\n// ===============================\n\n/**\n * Calculates great circle distance between two points using Haversine formula\n * @param {number} lat1 - Departure latitude\n * @param {number} lon1 - Departure longitude\n * @param {number} lat2 - Arrival latitude\n * @param {number} lon2 - Arrival longitude\n * @returns {number} - Distance in miles\n */\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n\n// Calculate total distance for a route\nconst calculateRouteDistance = route => {\n  let totalDistance = 0;\n  for (let i = 0; i < route.length; i++) {\n    const segment = route[i];\n    const departureAirport = airports.find(a => a.IATA === segment.Departure_IATA);\n    const arrivalAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    if (departureAirport && arrivalAirport) {\n      const segmentDistance = calculateDistance(departureAirport.Latitude, departureAirport.Longitude, arrivalAirport.Latitude, arrivalAirport.Longitude);\n      totalDistance += segmentDistance;\n    }\n  }\n  return totalDistance;\n};\nexport function SearchPage() {\n  _s();\n  var _airports$find6, _airports$find7, _airports$find8, _airports$find9, _airports$find10, _airports$find11;\n  // State for selected airports and search results\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [avoidCountries, setAvoidCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [avoidAirlines, setAvoidAirlines] = useState([]);\n\n  // Get the country options when component mounts\n  const countryOptions = useMemo(() => {\n    return getUniqueCountries(airports);\n  }, []);\n\n  // Calculates direct distance between airports using Haversine formula\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    if (!originAirport || !destAirport) return null;\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  // Handles the search button click\n  // Updates URL parameters and finds possible routes\n  const handleSearch = async () => {\n    // Show loading overlay immediately\n    setIsLoading(true);\n    setShowResults(false);\n    try {\n      // Wait for 250ms to ensure overlay is visible\n      await new Promise(resolve => setTimeout(resolve, 250));\n      if (departureAirport && arrivalAirport) {\n        const params = new URLSearchParams();\n        params.set('from', departureAirport);\n        params.set('to', arrivalAirport);\n        params.set('avoidCountries', avoidCountries.join(','));\n        window.history.pushState({}, '', `${window.location.pathname}?${params.toString()}`);\n        const originAirport = airports.find(a => a.IATA === departureAirport);\n        const visited = new Set([departureAirport]);\n        const visitedCountries = new Set([originAirport.Country]);\n        const routes = findPossibleRoutes(departureAirport, arrivalAirport, visited, visitedCountries);\n\n        // Filter out routes that go through avoided countries\n        const filteredRoutes = routes.filter(route => isRouteAvoidingCountries(route, avoidCountries));\n\n        // Sort routes by total distance\n        const sortedRoutes = filteredRoutes.sort((a, b) => {\n          const distanceA = calculateRouteDistance(a);\n          const distanceB = calculateRouteDistance(b);\n          return distanceA - distanceB; // Low to high\n        });\n        setSearchResults(sortedRoutes);\n        setShowResults(true);\n      }\n    } catch (error) {\n      console.error('Error searching routes:', error);\n    } finally {\n      // Add a small delay before hiding loading screen for smoother transition\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setIsLoading(false);\n    }\n  };\n\n  // Airport search with better IATA and name prioritization\n  const getAirportOptions = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n\n    // Priority 1: Exact IATA match\n    const exactIataMatches = airports.filter(airport => airport.IATA.toLowerCase() === input);\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = airports.filter(airport => airport.IATA.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport));\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = airports.filter(airport => airport.Name.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport));\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = airports.filter(airport => airport.Name.toLowerCase().includes(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport) && !startingNameMatches.includes(airport));\n\n    // Combine all matches with proper ordering\n    const allMatches = [...exactIataMatches, ...startingIataMatches, ...startingNameMatches, ...containingNameMatches].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n\n  // Country search with progressive character matching\n  const getCountryOptions = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n\n    // First: Exact matches\n    const exactMatches = countries.filter(country => country.toLowerCase() === input);\n\n    // Second: Starting matches (progressive matching)\n    const startingMatches = countries.filter(country => country.toLowerCase().startsWith(input) && !exactMatches.includes(country));\n\n    // Third: Progressive character matching\n    const progressiveMatches = countries.filter(country => {\n      if (exactMatches.includes(country) || startingMatches.includes(country)) {\n        return false;\n      }\n      const countryChars = country.toLowerCase();\n      let lastIndex = -1;\n\n      // Check if characters appear in sequence\n      for (const char of input) {\n        const index = countryChars.indexOf(char, lastIndex + 1);\n        if (index === -1) return false;\n        lastIndex = index;\n      }\n      return true;\n    });\n\n    // Combine all matches with proper ordering\n    const allMatches = [...exactMatches, ...startingMatches, ...progressiveMatches].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(country => ({\n      value: country,\n      label: country\n    }));\n  };\n  const filterCountries = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n\n    // Priority 1: Exact matches\n    const exactMatches = countries.filter(country => country.toLowerCase() === input);\n\n    // Priority 2: Starts with input\n    const startingMatches = countries.filter(country => country.toLowerCase().startsWith(input) && !exactMatches.includes(country));\n\n    // Priority 3: Contains input\n    const containingMatches = countries.filter(country => country.toLowerCase().includes(input) && !exactMatches.includes(country) && !startingMatches.includes(country));\n    return [...exactMatches, ...startingMatches, ...containingMatches].slice(0, 5).map(country => ({\n      value: country,\n      label: country\n    }));\n  };\n  const loadCountryOptions = inputValue => new Promise(resolve => {\n    resolve(filterCountries(inputValue));\n  });\n  const filterAirports = inputValue => {\n    if (!inputValue) return [];\n    const input = inputValue.toLowerCase().trim();\n\n    // Filter out airports from avoided countries first\n    const availableAirports = airports.filter(airport => !avoidCountries.includes(airport.Country));\n\n    // Priority 1: Exact IATA match\n    const exactIataMatches = availableAirports.filter(airport => airport.IATA.toLowerCase() === input);\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = availableAirports.filter(airport => airport.IATA.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport));\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = availableAirports.filter(airport => airport.Name.toLowerCase().startsWith(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport));\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = availableAirports.filter(airport => airport.Name.toLowerCase().includes(input) && !exactIataMatches.includes(airport) && !startingIataMatches.includes(airport) && !startingNameMatches.includes(airport));\n\n    // Combine all matches with proper ordering\n    const allMatches = [...exactIataMatches, ...startingIataMatches, ...startingNameMatches, ...containingNameMatches].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n  const loadAirportOptions = inputValue => new Promise(resolve => {\n    resolve(filterAirports(inputValue));\n  });\n\n  // Filter airlines function\n  const filterAirlines = inputValue => {\n    if (!inputValue) return airlines;\n    const input = inputValue.toLowerCase().trim();\n\n    // Priority 1: Exact airline code match\n    const exactCodeMatches = airlines.filter(airline => airline.value.toLowerCase() === input);\n\n    // Priority 2: Starting airline code match\n    const startingCodeMatches = airlines.filter(airline => airline.value.toLowerCase().startsWith(input) && !exactCodeMatches.includes(airline));\n\n    // Priority 3: Airline name contains input\n    const nameMatches = airlines.filter(airline => airline.label.toLowerCase().includes(input) && !exactCodeMatches.includes(airline) && !startingCodeMatches.includes(airline));\n    return [...exactCodeMatches, ...startingCodeMatches, ...nameMatches];\n  };\n  const loadAirlineOptions = inputValue => new Promise(resolve => {\n    resolve(filterAirlines(inputValue));\n  });\n\n  // Also clear selected airports if their country is now avoided\n  useEffect(() => {\n    if (departureAirport) {\n      var _airports$find4;\n      const departureCountry = (_airports$find4 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find4 === void 0 ? void 0 : _airports$find4.Country;\n      if (departureCountry && avoidCountries.includes(departureCountry)) {\n        setDepartureAirport('');\n      }\n    }\n    if (arrivalAirport) {\n      var _airports$find5;\n      const arrivalCountry = (_airports$find5 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find5 === void 0 ? void 0 : _airports$find5.Country;\n      if (arrivalCountry && avoidCountries.includes(arrivalCountry)) {\n        setArrivalAirport('');\n      }\n    }\n  }, [avoidCountries, departureAirport, arrivalAirport]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"airport-search\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-parameter departure-parameter\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontWeight: 700\n            },\n            children: \"Departure Airport:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n            className: \"select-input\",\n            cacheOptions: true,\n            defaultOptions: true,\n            value: departureAirport ? {\n              value: departureAirport,\n              label: ((_airports$find6 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find6 === void 0 ? void 0 : _airports$find6.IATA) + \" - \" + ((_airports$find7 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find7 === void 0 ? void 0 : _airports$find7.Name) + \" (\" + ((_airports$find8 = airports.find(a => a.IATA === departureAirport)) === null || _airports$find8 === void 0 ? void 0 : _airports$find8.Country) + \")\"\n            } : null,\n            loadOptions: loadAirportOptions,\n            onChange: selected => setDepartureAirport(selected ? selected.value : ''),\n            isDisabled: isLoading,\n            placeholder: \"Type to search airports...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-parameter arrival-parameter\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              fontWeight: 700\n            },\n            children: \"Arrival Airport:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n            className: \"select-input\",\n            cacheOptions: true,\n            defaultOptions: true,\n            value: arrivalAirport ? {\n              value: arrivalAirport,\n              label: ((_airports$find9 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find9 === void 0 ? void 0 : _airports$find9.IATA) + \" - \" + ((_airports$find10 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find10 === void 0 ? void 0 : _airports$find10.Name) + \" (\" + ((_airports$find11 = airports.find(a => a.IATA === arrivalAirport)) === null || _airports$find11 === void 0 ? void 0 : _airports$find11.Country) + \")\"\n            } : null,\n            loadOptions: loadAirportOptions,\n            onChange: selected => setArrivalAirport(selected ? selected.value : ''),\n            isDisabled: isLoading,\n            placeholder: \"Type to search airports...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-parameter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Avoid Countries:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n          isMulti: true,\n          className: \"select-input avoid-countries-select\",\n          cacheOptions: true,\n          defaultOptions: true,\n          value: avoidCountries.map(country => ({\n            value: country,\n            label: country\n          })),\n          loadOptions: loadCountryOptions,\n          onChange: selected => {\n            setAvoidCountries(selected ? selected.map(option => option.value) : []);\n          },\n          isDisabled: isLoading,\n          placeholder: \"Type to search countries...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-parameter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Avoid Airlines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n          isMulti: true,\n          className: \"select-input avoid-airlines-select\",\n          cacheOptions: true,\n          defaultOptions: airlines,\n          value: avoidAirlines.map(airline => {\n            var _airlines$find;\n            return {\n              value: airline,\n              label: ((_airlines$find = airlines.find(a => a.value === airline)) === null || _airlines$find === void 0 ? void 0 : _airlines$find.label) || airline\n            };\n          }),\n          loadOptions: loadAirlineOptions,\n          onChange: selected => {\n            setAvoidAirlines(selected ? selected.map(option => option.value) : []);\n          },\n          isDisabled: isLoading,\n          placeholder: \"Select airlines to avoid...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: handleSearch,\n        disabled: isLoading || !departureAirport || !arrivalAirport,\n        children: isLoading ? 'Searching...' : 'Search'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightResults, {\n      results: searchResults,\n      isVisible: showResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-text\",\n        children: \"Searching for routes...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 691,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchPage, \"GoCqF8MviSOVuyJkfAFSeg2vp3Q=\");\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","AirportSearch","FlightResults","UA_miles","SQ_miles","LH_miles","LX_miles","TG_miles","BR_miles","NH_miles","OS_miles","OZ_miles","NZ_miles","SA_miles","AI_miles","LO_miles","SN_miles","A3_miles","TP_miles","MS_miles","WY_miles","GF_miles","AC_miles","airports","getUniqueCountries","Select","AsyncSelect","jsxDEV","_jsxDEV","COTERMINALS","EUROPEAN_COUNTRIES","Set","getCoTerminalGroup","airport","group","Object","entries","includes","isValidCoTerminalRoute","newSegment","existingPath","allAirports","map","seg","Departure_IATA","Arrival_IATA","usedCoTerminals","Map","coTerminalGroup","has","get","set","findPossibleRoutes","origin","destination","visited","visitedCountries","path","directDistance","allRoutes","avoidAirlines","routes","originAirport","find","a","IATA","destAirport","isOriginNorthAmerica","Country","isDestNorthAmerica","bothInNorthAmerica","northAmericaLayovers","reduce","count","segment","layoverAirport","europeanLayovers","calculateDirectDistance","length","totalDistance","sum","Distance","currentPoint","currentAirport","getLayoverCountByCountry","currentPath","countByCountry","forEach","possibleSegments","filter","route","_airports$find","_airports$find2","_airports$find3","thisArrivalAirport","layoverCounts","arrivalCountry","originZone","Zone","destZone","arrivalZone","arrivalAirport","isArrivalNorthAmerica","isEuropeanArrival","isBacktrackingCountry","currentTotalDistance","newVisited","add","newVisitedCountries","newPath","newRoutes","push","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","sin","cos","c","atan2","sqrt","calculateRouteDistance","i","departureAirport","segmentDistance","Latitude","Longitude","SearchPage","_s","_airports$find6","_airports$find7","_airports$find8","_airports$find9","_airports$find10","_airports$find11","setDepartureAirport","setArrivalAirport","searchResults","setSearchResults","showResults","setShowResults","avoidCountries","setAvoidCountries","isLoading","setIsLoading","setAvoidAirlines","countryOptions","handleSearch","Promise","resolve","setTimeout","params","URLSearchParams","join","window","history","pushState","location","pathname","toString","filteredRoutes","isRouteAvoidingCountries","sortedRoutes","sort","b","distanceA","distanceB","error","console","getAirportOptions","inputValue","input","toLowerCase","trim","exactIataMatches","startingIataMatches","startsWith","startingNameMatches","Name","containingNameMatches","allMatches","slice","value","label","getCountryOptions","countries","exactMatches","country","startingMatches","progressiveMatches","countryChars","lastIndex","char","index","indexOf","filterCountries","containingMatches","loadCountryOptions","filterAirports","availableAirports","loadAirportOptions","filterAirlines","airlines","exactCodeMatches","airline","startingCodeMatches","nameMatches","loadAirlineOptions","_airports$find4","departureCountry","_airports$find5","className","children","style","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","cacheOptions","defaultOptions","loadOptions","onChange","selected","isDisabled","placeholder","isMulti","option","_airlines$find","onClick","disabled","results","isVisible","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Documents/git/routebuilder/src/components/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';   \nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json'; \nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\nimport { getUniqueCountries } from '../utils/countryUtils';\nimport Select from 'react-select';\nimport AsyncSelect from 'react-select/async';\n\n// ===============================\n// Constants and Configuration\n// ===============================\n\n// Co-terminal airport groups organized by region\n// These are airports that serve the same city/area and count as one stop\nconst COTERMINALS = {\n  // North America co-terminals (major city airport systems)\n  'CHI': ['MDW', 'ORD'],  // Chicago: Midway and O'Hare\n  'DAL': ['DFW', 'DAL'],  // Dallas: DFW and Love Field\n  // ... other co-terminals\n\n  // European co-terminal groups\n  'LON': ['LCY', 'LGW', 'LHR', 'LTN', 'STN'],  // London's five airports\n  'PAR': ['CDG', 'ORY'],  // Paris: Charles de Gaulle and Orly\n  \n  // Asian co-terminal groups\n  'TYO': ['HND', 'NRT'],  // Tokyo: Haneda and Narita\n  'SEL': ['GMP', 'ICN'],  // Seoul: Gimpo and Incheon\n};\n\n// Set of European countries for regional layover restrictions\n// Used to enforce maximum 2 stops in Europe rule\nconst EUROPEAN_COUNTRIES = new Set([\n  'Germany', 'United Kingdom', 'France',\n  // ... other European countries\n]);\n\n// ===============================\n// Helper Functions\n// ===============================\n\n/**\n * Finds which co-terminal group an airport belongs to\n * @param {string} airport - IATA code of the airport\n * @returns {string|null} - Co-terminal group code or null if not in any group\n */\nfunction getCoTerminalGroup(airport) {\n  for (const [group, airports] of Object.entries(COTERMINALS)) {\n    if (airports.includes(airport)) {\n      return group;\n    }\n  }\n  return null;\n}\n\n/**\n * Validates that a route doesn't use multiple airports from the same co-terminal group\n * Example: Can't use both LHR and LGW in the same itinerary\n * @param {Object} newSegment - The new flight segment being considered\n * @param {Array} existingPath - Current path of flight segments\n * @returns {boolean} - True if co-terminal rules are satisfied\n */\nfunction isValidCoTerminalRoute(newSegment, existingPath) {\n  const allAirports = [\n    ...existingPath.map(seg => seg.Departure_IATA),\n    ...existingPath.map(seg => seg.Arrival_IATA),\n    newSegment[\"Departure IATA\"],\n    newSegment[\"Arrival IATA\"]\n  ];\n  \n  const usedCoTerminals = new Map();\n  \n  for (const airport of allAirports) {\n    const coTerminalGroup = getCoTerminalGroup(airport);\n    if (coTerminalGroup) {\n      if (usedCoTerminals.has(coTerminalGroup)) {\n        // If we already used a different airport from this co-terminal group\n        if (usedCoTerminals.get(coTerminalGroup) !== airport) {\n          return false;\n        }\n      } else {\n        usedCoTerminals.set(coTerminalGroup, airport);\n      }\n    }\n  }\n  \n  return true;\n}\n\n// ===============================\n// Route Finding Core Logic\n// ===============================\n\n/**\n * Main recursive function to find all valid routes between two airports\n * Implements Aeroplan routing rules:\n * 1. Maximum 4 segments\n * 2. No more than 2 connections in Europe/North America\n * 3. No backtracking to previously visited countries\n * 4. Total distance <= 2x direct distance\n * 5. Co-terminal restrictions\n */\nconst findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n  // Create filtered allRoutes based on avoided airlines\n  const allRoutes = [\n    ...(avoidAirlines.includes('UA') ? [] : UA_miles),\n    ...(avoidAirlines.includes('SQ') ? [] : SQ_miles),\n    ...(avoidAirlines.includes('LH') ? [] : LH_miles),\n    ...(avoidAirlines.includes('LX') ? [] : LX_miles),\n    ...(avoidAirlines.includes('TG') ? [] : TG_miles),\n    ...(avoidAirlines.includes('BR') ? [] : BR_miles),\n    ...(avoidAirlines.includes('NH') ? [] : NH_miles),\n    ...(avoidAirlines.includes('OS') ? [] : OS_miles),\n    ...(avoidAirlines.includes('OZ') ? [] : OZ_miles),\n    ...(avoidAirlines.includes('NZ') ? [] : NZ_miles),\n    ...(avoidAirlines.includes('SA') ? [] : SA_miles),\n    ...(avoidAirlines.includes('AI') ? [] : AI_miles),\n    ...(avoidAirlines.includes('LO') ? [] : LO_miles),\n    ...(avoidAirlines.includes('SN') ? [] : SN_miles),\n    ...(avoidAirlines.includes('A3') ? [] : A3_miles),\n    ...(avoidAirlines.includes('TP') ? [] : TP_miles),\n    ...(avoidAirlines.includes('MS') ? [] : MS_miles),\n    ...(avoidAirlines.includes('WY') ? [] : WY_miles),\n    ...(avoidAirlines.includes('GF') ? [] : GF_miles),\n    ...(avoidAirlines.includes('AC') ? [] : AC_miles)\n  ];\n\n  const routes = [];\n\n  // Get origin and destination airport details for US/Canada check\n  const originAirport = airports.find(a => a.IATA === origin);\n  const destAirport = airports.find(a => a.IATA === destination);\n  const isOriginNorthAmerica = ['United States', 'Canada'].includes(originAirport?.Country);\n  const isDestNorthAmerica = ['United States', 'Canada'].includes(destAirport?.Country);\n  const bothInNorthAmerica = isOriginNorthAmerica && isDestNorthAmerica;\n\n  // Count existing US/Canada layovers in the current path\n  const northAmericaLayovers = path.reduce((count, segment) => {\n    const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    return count + (['United States', 'Canada'].includes(layoverAirport?.Country) ? 1 : 0);\n  }, 0);\n\n  // Count existing European layovers in the current path\n  const europeanLayovers = path.reduce((count, segment) => {\n    const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    return count + (EUROPEAN_COUNTRIES.has(layoverAirport?.Country) ? 1 : 0);\n  }, 0);\n\n  // Calculate direct distance if not provided\n  if (directDistance === null) {\n    directDistance = calculateDirectDistance(origin, destination);\n    if (!directDistance) return [];\n  }\n\n  // Base case: if we've found a path to the destination\n  if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n    const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n    if (totalDistance <= directDistance * 2) {\n      return [path];\n    }\n    return [];\n  }\n\n  // Don't allow paths longer than 6 segments (5 stops)\n  if (path.length >= 4) {\n    return [];\n  }\n\n  // Get current point and its country\n  const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n  const currentAirport = airports.find(a => a.IATA === currentPoint);\n  \n  if (!currentAirport) return [];\n\n  // Add helper function to count layovers by country\n  const getLayoverCountByCountry = (currentPath) => {\n    const countByCountry = {};\n    currentPath.forEach(segment => {\n      const airport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      if (airport) {\n        countByCountry[airport.Country] = (countByCountry[airport.Country] || 0) + 1;\n      }\n    });\n    return countByCountry;\n  };\n\n  const possibleSegments = allRoutes.filter(route => {\n    if (route[\"Departure IATA\"] !== currentPoint) return false;\n\n    // Get origin and destination countries\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    const thisArrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n    \n    if (!originAirport || !destAirport || !thisArrivalAirport) return false;\n\n    // Check for multiple layovers in same country\n    const layoverCounts = getLayoverCountByCountry(path);\n    const arrivalCountry = thisArrivalAirport.Country;\n    \n    // Allow multiple stops only if it's origin or destination country\n    if (arrivalCountry !== originAirport.Country && \n        arrivalCountry !== destAirport.Country && \n        layoverCounts[arrivalCountry] >= 1) {\n      return false;\n    }\n\n    // Get zones\n    const originZone = airports.find(a => a.IATA === origin)?.Zone;\n    const destZone = airports.find(a => a.IATA === destination)?.Zone;\n    const arrivalZone = airports.find(a => a.IATA === route[\"Arrival IATA\"])?.Zone;\n\n    // If origin and destination are in same zone, prevent connections through different zones\n    if (originZone === destZone && arrivalZone !== originZone) {\n      return false;\n    }\n\n    // Add co-terminal validation\n    if (!isValidCoTerminalRoute(route, path)) {\n      return false;\n    }\n    \n    // Get the arrival airport details\n    const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n    if (!arrivalAirport) return false;\n\n    // Check if adding this segment would exceed US/Canada layover limit\n    const isArrivalNorthAmerica = ['United States', 'Canada'].includes(arrivalAirport.Country);\n    if (isArrivalNorthAmerica && !bothInNorthAmerica && northAmericaLayovers >= 2) {\n      return false;\n    }\n\n    // Check if adding this segment would exceed European layover limit\n    const isEuropeanArrival = EUROPEAN_COUNTRIES.has(arrivalAirport.Country);\n    if (isEuropeanArrival && europeanLayovers >= 2) {\n      return false;\n    }\n\n    // Check if we're not backtracking to a visited airport\n    if (visited.has(route[\"Arrival IATA\"])) return false;\n\n    // Check if we're not backtracking to a visited country\n    // Exception: Allow same country connection if it's a direct continuation\n    const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) &&\n                                arrivalAirport.Country !== currentAirport.Country;\n    if (isBacktrackingCountry) return false;\n\n    return true;\n  });\n\n  // Try each possible next segment\n  for (const segment of possibleSegments) {\n    const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n    \n    // Calculate running total distance\n    const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + \n                             segment[\"Flight Distance (miles)\"];\n    \n    // Skip this path if it's already over 2x direct distance\n    if (currentTotalDistance > directDistance * 2) {\n      continue;\n    }\n\n    // Update visited sets\n    const newVisited = new Set(visited);\n    newVisited.add(segment[\"Arrival IATA\"]);\n    \n    const newVisitedCountries = new Set(visitedCountries);\n    newVisitedCountries.add(arrivalAirport.Country);\n\n    const newPath = [...path, {\n      Departure_IATA: segment[\"Departure IATA\"],\n      Arrival_IATA: segment[\"Arrival IATA\"],\n      Distance: segment[\"Flight Distance (miles)\"],\n      Country: arrivalAirport.Country // Add country info for reference\n    }];\n\n    const newRoutes = findPossibleRoutes(\n      origin,\n      destination,\n      newVisited,\n      newVisitedCountries,\n      newPath,\n      directDistance\n    );\n\n    routes.push(...newRoutes);\n  }\n\n  return routes;\n};\n\n// ===============================\n// Distance Calculation Functions\n// ===============================\n\n/**\n * Calculates great circle distance between two points using Haversine formula\n * @param {number} lat1 - Departure latitude\n * @param {number} lon1 - Departure longitude\n * @param {number} lat2 - Arrival latitude\n * @param {number} lon2 - Arrival longitude\n * @returns {number} - Distance in miles\n */\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n\n// Calculate total distance for a route\nconst calculateRouteDistance = (route) => {\n  let totalDistance = 0;\n  \n  for (let i = 0; i < route.length; i++) {\n    const segment = route[i];\n    const departureAirport = airports.find(a => a.IATA === segment.Departure_IATA);\n    const arrivalAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n    \n    if (departureAirport && arrivalAirport) {\n      const segmentDistance = calculateDistance(\n        departureAirport.Latitude,\n        departureAirport.Longitude,\n        arrivalAirport.Latitude,\n        arrivalAirport.Longitude\n      );\n      totalDistance += segmentDistance;\n    }\n  }\n  \n  return totalDistance;\n};\n\nexport function SearchPage() {\n  // State for selected airports and search results\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [avoidCountries, setAvoidCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [avoidAirlines, setAvoidAirlines] = useState([]);\n\n  // Get the country options when component mounts\n  const countryOptions = useMemo(() => {\n    return getUniqueCountries(airports);\n  }, []);\n\n  // Calculates direct distance between airports using Haversine formula\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    \n    if (!originAirport || !destAirport) return null;\n\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n             Math.cos(lat1) * Math.cos(lat2) *\n             Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  // Handles the search button click\n  // Updates URL parameters and finds possible routes\n  const handleSearch = async () => {\n    // Show loading overlay immediately\n    setIsLoading(true);\n    setShowResults(false);\n\n    try {\n      // Wait for 250ms to ensure overlay is visible\n      await new Promise(resolve => setTimeout(resolve, 250));\n\n      if (departureAirport && arrivalAirport) {\n        const params = new URLSearchParams();\n        params.set('from', departureAirport);\n        params.set('to', arrivalAirport);\n        params.set('avoidCountries', avoidCountries.join(','));\n        \n        window.history.pushState(\n          {}, \n          '', \n          `${window.location.pathname}?${params.toString()}`\n        );\n        \n        const originAirport = airports.find(a => a.IATA === departureAirport);\n        const visited = new Set([departureAirport]);\n        const visitedCountries = new Set([originAirport.Country]);\n        \n        const routes = findPossibleRoutes(\n          departureAirport, \n          arrivalAirport, \n          visited,\n          visitedCountries\n        );\n        \n        // Filter out routes that go through avoided countries\n        const filteredRoutes = routes.filter(route => \n          isRouteAvoidingCountries(route, avoidCountries)\n        );\n        \n        // Sort routes by total distance\n        const sortedRoutes = filteredRoutes.sort((a, b) => {\n          const distanceA = calculateRouteDistance(a);\n          const distanceB = calculateRouteDistance(b);\n          return distanceA - distanceB; // Low to high\n        });\n        \n        setSearchResults(sortedRoutes);\n        setShowResults(true);\n      }\n    } catch (error) {\n      console.error('Error searching routes:', error);\n    } finally {\n      // Add a small delay before hiding loading screen for smoother transition\n      await new Promise(resolve => setTimeout(resolve, 100));\n      setIsLoading(false);\n    }\n  };\n\n  // Airport search with better IATA and name prioritization\n  const getAirportOptions = (inputValue) => {\n    if (!inputValue) return [];\n    \n    const input = inputValue.toLowerCase().trim();\n    \n    // Priority 1: Exact IATA match\n    const exactIataMatches = airports.filter(airport => \n      airport.IATA.toLowerCase() === input\n    );\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = airports.filter(airport => \n      airport.IATA.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport)\n    );\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = airports.filter(airport => \n      airport.Name.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport)\n    );\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = airports.filter(airport => \n      airport.Name.toLowerCase().includes(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport) &&\n      !startingNameMatches.includes(airport)\n    );\n\n    // Combine all matches with proper ordering\n    const allMatches = [\n      ...exactIataMatches,\n      ...startingIataMatches,\n      ...startingNameMatches,\n      ...containingNameMatches\n    ].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n\n  // Country search with progressive character matching\n  const getCountryOptions = (inputValue) => {\n    if (!inputValue) return [];\n\n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n    \n    // First: Exact matches\n    const exactMatches = countries.filter(country => \n      country.toLowerCase() === input\n    );\n\n    // Second: Starting matches (progressive matching)\n    const startingMatches = countries.filter(country => \n      country.toLowerCase().startsWith(input) &&\n      !exactMatches.includes(country)\n    );\n\n    // Third: Progressive character matching\n    const progressiveMatches = countries.filter(country => {\n      if (exactMatches.includes(country) || startingMatches.includes(country)) {\n        return false;\n      }\n      \n      const countryChars = country.toLowerCase();\n      let lastIndex = -1;\n      \n      // Check if characters appear in sequence\n      for (const char of input) {\n        const index = countryChars.indexOf(char, lastIndex + 1);\n        if (index === -1) return false;\n        lastIndex = index;\n      }\n      \n      return true;\n    });\n\n    // Combine all matches with proper ordering\n    const allMatches = [\n      ...exactMatches,\n      ...startingMatches,\n      ...progressiveMatches\n    ].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(country => ({\n      value: country,\n      label: country\n    }));\n  };\n\n  const filterCountries = (inputValue) => {\n    if (!inputValue) return [];\n    \n    const input = inputValue.toLowerCase().trim();\n    const countries = getUniqueCountries(airports);\n    \n    // Priority 1: Exact matches\n    const exactMatches = countries.filter(country => \n      country.toLowerCase() === input\n    );\n\n    // Priority 2: Starts with input\n    const startingMatches = countries.filter(country => \n      country.toLowerCase().startsWith(input) &&\n      !exactMatches.includes(country)\n    );\n\n    // Priority 3: Contains input\n    const containingMatches = countries.filter(country => \n      country.toLowerCase().includes(input) &&\n      !exactMatches.includes(country) &&\n      !startingMatches.includes(country)\n    );\n\n    return [...exactMatches, ...startingMatches, ...containingMatches]\n      .slice(0, 5)\n      .map(country => ({\n        value: country,\n        label: country\n      }));\n  };\n\n  const loadCountryOptions = (inputValue) => \n    new Promise((resolve) => {\n      resolve(filterCountries(inputValue));\n    });\n\n  const filterAirports = (inputValue) => {\n    if (!inputValue) return [];\n    \n    const input = inputValue.toLowerCase().trim();\n    \n    // Filter out airports from avoided countries first\n    const availableAirports = airports.filter(airport => \n      !avoidCountries.includes(airport.Country)\n    );\n    \n    // Priority 1: Exact IATA match\n    const exactIataMatches = availableAirports.filter(airport => \n      airport.IATA.toLowerCase() === input\n    );\n\n    // Priority 2: IATA starts with input\n    const startingIataMatches = availableAirports.filter(airport => \n      airport.IATA.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport)\n    );\n\n    // Priority 3: Airport name starts with input\n    const startingNameMatches = availableAirports.filter(airport => \n      airport.Name.toLowerCase().startsWith(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport)\n    );\n\n    // Priority 4: Airport name contains input\n    const containingNameMatches = availableAirports.filter(airport => \n      airport.Name.toLowerCase().includes(input) &&\n      !exactIataMatches.includes(airport) &&\n      !startingIataMatches.includes(airport) &&\n      !startingNameMatches.includes(airport)\n    );\n\n    // Combine all matches with proper ordering\n    const allMatches = [\n      ...exactIataMatches,\n      ...startingIataMatches,\n      ...startingNameMatches,\n      ...containingNameMatches\n    ].slice(0, 5); // Limit to 5 results\n\n    return allMatches.map(airport => ({\n      value: airport.IATA,\n      label: `${airport.IATA} - ${airport.Name} (${airport.Country})`\n    }));\n  };\n\n  const loadAirportOptions = (inputValue) => \n    new Promise((resolve) => {\n      resolve(filterAirports(inputValue));\n    });\n\n  // Filter airlines function\n  const filterAirlines = (inputValue) => {\n    if (!inputValue) return airlines;\n    \n    const input = inputValue.toLowerCase().trim();\n    \n    // Priority 1: Exact airline code match\n    const exactCodeMatches = airlines.filter(airline => \n      airline.value.toLowerCase() === input\n    );\n\n    // Priority 2: Starting airline code match\n    const startingCodeMatches = airlines.filter(airline => \n      airline.value.toLowerCase().startsWith(input) &&\n      !exactCodeMatches.includes(airline)\n    );\n\n    // Priority 3: Airline name contains input\n    const nameMatches = airlines.filter(airline => \n      airline.label.toLowerCase().includes(input) &&\n      !exactCodeMatches.includes(airline) &&\n      !startingCodeMatches.includes(airline)\n    );\n\n    return [...exactCodeMatches, ...startingCodeMatches, ...nameMatches];\n  };\n\n  const loadAirlineOptions = (inputValue) => \n    new Promise((resolve) => {\n      resolve(filterAirlines(inputValue));\n    });\n\n  // Also clear selected airports if their country is now avoided\n  useEffect(() => {\n    if (departureAirport) {\n      const departureCountry = airports.find(a => a.IATA === departureAirport)?.Country;\n      if (departureCountry && avoidCountries.includes(departureCountry)) {\n        setDepartureAirport('');\n      }\n    }\n    \n    if (arrivalAirport) {\n      const arrivalCountry = airports.find(a => a.IATA === arrivalAirport)?.Country;\n      if (arrivalCountry && avoidCountries.includes(arrivalCountry)) {\n        setArrivalAirport('');\n      }\n    }\n  }, [avoidCountries, departureAirport, arrivalAirport]);\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-boxes\">\n        <div className=\"airport-search\">\n          <div className=\"search-parameter departure-parameter\">\n            <label style={{ fontWeight: 700 }}>Departure Airport:</label>\n            <AsyncSelect\n              className=\"select-input\"\n              cacheOptions\n              defaultOptions\n              value={departureAirport ? {\n                value: departureAirport,\n                label: airports.find(a => a.IATA === departureAirport)?.IATA + \n                  \" - \" + airports.find(a => a.IATA === departureAirport)?.Name +\n                  \" (\" + airports.find(a => a.IATA === departureAirport)?.Country + \")\"\n              } : null}\n              loadOptions={loadAirportOptions}\n              onChange={(selected) => setDepartureAirport(selected ? selected.value : '')}\n              isDisabled={isLoading}\n              placeholder=\"Type to search airports...\"\n            />\n          </div>\n          <div className=\"search-parameter arrival-parameter\">\n            <label style={{ fontWeight: 700 }}>Arrival Airport:</label>\n            <AsyncSelect\n              className=\"select-input\"\n              cacheOptions\n              defaultOptions\n              value={arrivalAirport ? {\n                value: arrivalAirport,\n                label: airports.find(a => a.IATA === arrivalAirport)?.IATA + \n                  \" - \" + airports.find(a => a.IATA === arrivalAirport)?.Name +\n                  \" (\" + airports.find(a => a.IATA === arrivalAirport)?.Country + \")\"\n              } : null}\n              loadOptions={loadAirportOptions}\n              onChange={(selected) => setArrivalAirport(selected ? selected.value : '')}\n              isDisabled={isLoading}\n              placeholder=\"Type to search airports...\"\n            />\n          </div>\n        </div>\n        <div className=\"search-parameter\">\n          <label>Avoid Countries:</label>\n          <AsyncSelect\n            isMulti\n            className=\"select-input avoid-countries-select\"\n            cacheOptions\n            defaultOptions\n            value={avoidCountries.map(country => ({\n              value: country,\n              label: country\n            }))}\n            loadOptions={loadCountryOptions}\n            onChange={(selected) => {\n              setAvoidCountries(selected ? selected.map(option => option.value) : []);\n            }}\n            isDisabled={isLoading}\n            placeholder=\"Type to search countries...\"\n          />\n        </div>\n        <div className=\"search-parameter\">\n          <label>Avoid Airlines:</label>\n          <AsyncSelect\n            isMulti\n            className=\"select-input avoid-airlines-select\"\n            cacheOptions\n            defaultOptions={airlines}\n            value={avoidAirlines.map(airline => ({\n              value: airline,\n              label: airlines.find(a => a.value === airline)?.label || airline\n            }))}\n            loadOptions={loadAirlineOptions}\n            onChange={(selected) => {\n              setAvoidAirlines(selected ? selected.map(option => option.value) : []);\n            }}\n            isDisabled={isLoading}\n            placeholder=\"Select airlines to avoid...\"\n          />\n        </div>\n        <button \n          className=\"search-button\"\n          onClick={handleSearch}\n          disabled={isLoading || !departureAirport || !arrivalAirport}\n        >\n          {isLoading ? 'Searching...' : 'Search'}\n        </button>\n      </div>\n      <FlightResults \n        results={searchResults} \n        isVisible={showResults}\n      />\n      \n      {isLoading && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\"></div>\n          <div className=\"loading-text\">Searching for routes...</div>\n        </div>\n      )}\n    </div>\n  );\n} \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}