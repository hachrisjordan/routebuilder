{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Route builder/RouteBuilder/src/components/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport { airports } from '../data/airports';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SearchPage() {\n  _s();\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    if (!originAirport || !destAirport) return null;\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  const findPossibleRoutes = (origin, destination, visited = new Set(), path = [], directDistance = null) => {\n    const allRoutes = [...UA_miles, ...SQ_miles];\n    const routes = [];\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      // Calculate total distance of this path\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n\n      // Check if the route is within 100% of direct distance\n      if (totalDistance <= directDistance * 2) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 3 segments\n    if (path.length >= 3) {\n      return [];\n    }\n\n    // Get all possible next segments\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    const possibleSegments = allRoutes.filter(route => route[\"Departure IATA\"] === currentPoint && !visited.has(route[\"Arrival IATA\"]));\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + segment[\"Flight Distance (miles)\"];\n\n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"]\n      }];\n      const newRoutes = findPossibleRoutes(origin, destination, newVisited, newPath, directDistance);\n      routes.push(...newRoutes);\n    }\n    return routes;\n  };\n  const handleSearch = () => {\n    if (departureAirport && arrivalAirport) {\n      const params = new URLSearchParams();\n      params.set('from', departureAirport);\n      params.set('to', arrivalAirport);\n      window.history.pushState({}, '', `${window.location.pathname}?${params.toString()}`);\n      const visited = new Set([departureAirport]);\n      const routes = findPossibleRoutes(departureAirport, arrivalAirport, visited);\n      setSearchResults(routes);\n      setShowResults(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(AirportSearch, {\n        label: \"Departure\",\n        value: departureAirport,\n        onChange: setDepartureAirport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AirportSearch, {\n        label: \"Arrival\",\n        value: arrivalAirport,\n        onChange: setArrivalAirport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search Flights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightResults, {\n      results: searchResults,\n      isVisible: showResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchPage, \"JcjwBUat90Lg0aOgtITABDzpwpw=\");\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","AirportSearch","FlightResults","UA_miles","SQ_miles","airports","jsxDEV","_jsxDEV","SearchPage","_s","departureAirport","setDepartureAirport","arrivalAirport","setArrivalAirport","searchResults","setSearchResults","showResults","setShowResults","calculateDirectDistance","origin","destination","originAirport","find","a","IATA","destAirport","R","lat1","Latitude","Math","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","findPossibleRoutes","visited","Set","path","directDistance","allRoutes","routes","length","Arrival_IATA","totalDistance","reduce","sum","segment","Distance","currentPoint","possibleSegments","filter","route","has","currentTotalDistance","seg","newVisited","add","newPath","Departure_IATA","newRoutes","push","handleSearch","params","URLSearchParams","set","window","history","pushState","location","pathname","toString","className","children","label","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","results","isVisible","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Route builder/RouteBuilder/src/components/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport { airports } from '../data/airports';\n\nexport function SearchPage() {\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    \n    if (!originAirport || !destAirport) return null;\n\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n             Math.cos(lat1) * Math.cos(lat2) *\n             Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  const findPossibleRoutes = (origin, destination, visited = new Set(), path = [], directDistance = null) => {\n    const allRoutes = [...UA_miles, ...SQ_miles];\n    const routes = [];\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      // Calculate total distance of this path\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n      \n      // Check if the route is within 100% of direct distance\n      if (totalDistance <= directDistance * 2) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 3 segments\n    if (path.length >= 3) {\n      return [];\n    }\n\n    // Get all possible next segments\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    \n    const possibleSegments = allRoutes.filter(route => \n      route[\"Departure IATA\"] === currentPoint && \n      !visited.has(route[\"Arrival IATA\"])\n    );\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + \n                                 segment[\"Flight Distance (miles)\"];\n      \n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"]\n      }];\n\n      const newRoutes = findPossibleRoutes(\n        origin,\n        destination,\n        newVisited,\n        newPath,\n        directDistance\n      );\n\n      routes.push(...newRoutes);\n    }\n\n    return routes;\n  };\n\n  const handleSearch = () => {\n    if (departureAirport && arrivalAirport) {\n      const params = new URLSearchParams();\n      params.set('from', departureAirport);\n      params.set('to', arrivalAirport);\n      \n      window.history.pushState(\n        {}, \n        '', \n        `${window.location.pathname}?${params.toString()}`\n      );\n      \n      const visited = new Set([departureAirport]);\n      const routes = findPossibleRoutes(departureAirport, arrivalAirport, visited);\n      \n      setSearchResults(routes);\n      setShowResults(true);\n    }\n  };\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-boxes\">\n        <AirportSearch \n          label=\"Departure\"\n          value={departureAirport}\n          onChange={setDepartureAirport}\n        />\n        <AirportSearch \n          label=\"Arrival\"\n          value={arrivalAirport}\n          onChange={setArrivalAirport}\n        />\n        <button onClick={handleSearch}>Search Flights</button>\n      </div>\n      <FlightResults \n        results={searchResults} \n        isVisible={showResults}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}