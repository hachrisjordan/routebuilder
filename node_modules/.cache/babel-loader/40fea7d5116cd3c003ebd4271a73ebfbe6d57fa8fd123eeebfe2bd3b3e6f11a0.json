{"ast":null,"code":"var _jsxFileName = \"/Users/hanguyen/Route builder/RouteBuilder/src/components/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';\nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json';\nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SearchPage() {\n  _s();\n  // State for selected airports and search results\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n\n  // Calculates direct distance between airports using Haversine formula\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    if (!originAirport || !destAirport) return null;\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  // Recursive function to find all valid routes between origin and destination\n  // Constraints:\n  // - Maximum 4 segments (3 stops)\n  // - Total distance <= 2x direct distance\n  // - No revisiting airports\n  // - No backtracking to previously visited countries (except direct connections)\n  // - Maximum 2 layovers in US/Canada unless both origin and destination are in US/Canada\n  const findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n    const allRoutes = [...UA_miles, ...SQ_miles, ...LH_miles, ...LX_miles, ...TG_miles, ...BR_miles, ...NH_miles, ...OS_miles, ...OZ_miles, ...NZ_miles, ...SA_miles, ...AI_miles, ...LO_miles, ...SN_miles, ...A3_miles, ...TP_miles, ...MS_miles, ...WY_miles, ...GF_miles, ...AC_miles];\n    const routes = [];\n\n    // Get origin and destination airport details for US/Canada check\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    const isOriginNorthAmerica = ['United States', 'Canada'].includes(originAirport === null || originAirport === void 0 ? void 0 : originAirport.Country);\n    const isDestNorthAmerica = ['United States', 'Canada'].includes(destAirport === null || destAirport === void 0 ? void 0 : destAirport.Country);\n    const bothInNorthAmerica = isOriginNorthAmerica && isDestNorthAmerica;\n\n    // Count existing US/Canada layovers in the current path\n    const northAmericaLayovers = path.reduce((count, segment) => {\n      const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      return count + (['United States', 'Canada'].includes(layoverAirport === null || layoverAirport === void 0 ? void 0 : layoverAirport.Country) ? 1 : 0);\n    }, 0);\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n      if (totalDistance <= directDistance * 2) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 6 segments (5 stops)\n    if (path.length >= 4) {\n      return [];\n    }\n\n    // Get current point and its country\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    const currentAirport = airports.find(a => a.IATA === currentPoint);\n    if (!currentAirport) return [];\n\n    // Get all possible next segments\n    const possibleSegments = allRoutes.filter(route => {\n      if (route[\"Departure IATA\"] !== currentPoint) return false;\n\n      // Get the arrival airport details\n      const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      if (!arrivalAirport) return false;\n\n      // Check if adding this segment would exceed US/Canada layover limit\n      const isArrivalNorthAmerica = ['United States', 'Canada'].includes(arrivalAirport.Country);\n      if (isArrivalNorthAmerica && !bothInNorthAmerica && northAmericaLayovers >= 2) {\n        return false;\n      }\n\n      // Check if we're not backtracking to a visited airport\n      if (visited.has(route[\"Arrival IATA\"])) return false;\n\n      // Check if we're not backtracking to a visited country\n      // Exception: Allow same country connection if it's a direct continuation\n      const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) && arrivalAirport.Country !== currentAirport.Country;\n      if (isBacktrackingCountry) return false;\n      return true;\n    });\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n\n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + segment[\"Flight Distance (miles)\"];\n\n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n\n      // Update visited sets\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n      const newVisitedCountries = new Set(visitedCountries);\n      newVisitedCountries.add(arrivalAirport.Country);\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"],\n        Country: arrivalAirport.Country // Add country info for reference\n      }];\n      const newRoutes = findPossibleRoutes(origin, destination, newVisited, newVisitedCountries, newPath, directDistance);\n      routes.push(...newRoutes);\n    }\n    return routes;\n  };\n\n  // Handles the search button click\n  // Updates URL parameters and finds possible routes\n  const handleSearch = () => {\n    if (departureAirport && arrivalAirport) {\n      const params = new URLSearchParams();\n      params.set('from', departureAirport);\n      params.set('to', arrivalAirport);\n      window.history.pushState({}, '', `${window.location.pathname}?${params.toString()}`);\n      const originAirport = airports.find(a => a.IATA === departureAirport);\n      const visited = new Set([departureAirport]);\n      const visitedCountries = new Set([originAirport.Country]);\n      const routes = findPossibleRoutes(departureAirport, arrivalAirport, visited, visitedCountries);\n      setSearchResults(routes);\n      setShowResults(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-boxes\",\n      children: [/*#__PURE__*/_jsxDEV(AirportSearch, {\n        label: \"Departure\",\n        value: departureAirport,\n        onChange: setDepartureAirport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AirportSearch, {\n        label: \"Arrival\",\n        value: arrivalAirport,\n        onChange: setArrivalAirport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search Flights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlightResults, {\n      results: searchResults,\n      isVisible: showResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchPage, \"JcjwBUat90Lg0aOgtITABDzpwpw=\");\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","AirportSearch","FlightResults","UA_miles","SQ_miles","LH_miles","LX_miles","TG_miles","BR_miles","NH_miles","OS_miles","OZ_miles","NZ_miles","SA_miles","AI_miles","LO_miles","SN_miles","A3_miles","TP_miles","MS_miles","WY_miles","GF_miles","AC_miles","airports","jsxDEV","_jsxDEV","SearchPage","_s","departureAirport","setDepartureAirport","arrivalAirport","setArrivalAirport","searchResults","setSearchResults","showResults","setShowResults","calculateDirectDistance","origin","destination","originAirport","find","a","IATA","destAirport","R","lat1","Latitude","Math","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","findPossibleRoutes","visited","Set","visitedCountries","path","directDistance","allRoutes","routes","isOriginNorthAmerica","includes","Country","isDestNorthAmerica","bothInNorthAmerica","northAmericaLayovers","reduce","count","segment","layoverAirport","Arrival_IATA","length","totalDistance","sum","Distance","currentPoint","currentAirport","possibleSegments","filter","route","isArrivalNorthAmerica","has","isBacktrackingCountry","currentTotalDistance","seg","newVisited","add","newVisitedCountries","newPath","Departure_IATA","newRoutes","push","handleSearch","params","URLSearchParams","set","window","history","pushState","location","pathname","toString","className","children","label","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","results","isVisible","_c","$RefreshReg$"],"sources":["/Users/hanguyen/Route builder/RouteBuilder/src/components/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';   \nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json'; \nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\n\nexport function SearchPage() {\n  // State for selected airports and search results\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n\n  // Calculates direct distance between airports using Haversine formula\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    \n    if (!originAirport || !destAirport) return null;\n\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n             Math.cos(lat1) * Math.cos(lat2) *\n             Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  // Recursive function to find all valid routes between origin and destination\n  // Constraints:\n  // - Maximum 4 segments (3 stops)\n  // - Total distance <= 2x direct distance\n  // - No revisiting airports\n  // - No backtracking to previously visited countries (except direct connections)\n  // - Maximum 2 layovers in US/Canada unless both origin and destination are in US/Canada\n  const findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n    const allRoutes = [...UA_miles, ...SQ_miles, ...LH_miles, ...LX_miles, ...TG_miles, ...BR_miles, ...NH_miles, ...OS_miles, ...OZ_miles, ...NZ_miles, ...SA_miles, ...AI_miles, ...LO_miles, ...SN_miles, ...A3_miles, ...TP_miles, ...MS_miles, ...WY_miles, ...GF_miles, ...AC_miles];\n    const routes = [];\n\n    // Get origin and destination airport details for US/Canada check\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    const isOriginNorthAmerica = ['United States', 'Canada'].includes(originAirport?.Country);\n    const isDestNorthAmerica = ['United States', 'Canada'].includes(destAirport?.Country);\n    const bothInNorthAmerica = isOriginNorthAmerica && isDestNorthAmerica;\n\n    // Count existing US/Canada layovers in the current path\n    const northAmericaLayovers = path.reduce((count, segment) => {\n      const layoverAirport = airports.find(a => a.IATA === segment.Arrival_IATA);\n      return count + (['United States', 'Canada'].includes(layoverAirport?.Country) ? 1 : 0);\n    }, 0);\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n      if (totalDistance <= directDistance * 2) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 6 segments (5 stops)\n    if (path.length >= 4) {\n      return [];\n    }\n\n    // Get current point and its country\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    const currentAirport = airports.find(a => a.IATA === currentPoint);\n    \n    if (!currentAirport) return [];\n\n    // Get all possible next segments\n    const possibleSegments = allRoutes.filter(route => {\n      if (route[\"Departure IATA\"] !== currentPoint) return false;\n      \n      // Get the arrival airport details\n      const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      if (!arrivalAirport) return false;\n\n      // Check if adding this segment would exceed US/Canada layover limit\n      const isArrivalNorthAmerica = ['United States', 'Canada'].includes(arrivalAirport.Country);\n      if (isArrivalNorthAmerica && !bothInNorthAmerica && northAmericaLayovers >= 2) {\n        return false;\n      }\n\n      // Check if we're not backtracking to a visited airport\n      if (visited.has(route[\"Arrival IATA\"])) return false;\n\n      // Check if we're not backtracking to a visited country\n      // Exception: Allow same country connection if it's a direct continuation\n      const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) &&\n                                  arrivalAirport.Country !== currentAirport.Country;\n      if (isBacktrackingCountry) return false;\n\n      return true;\n    });\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n      \n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + \n                               segment[\"Flight Distance (miles)\"];\n      \n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n\n      // Update visited sets\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n      \n      const newVisitedCountries = new Set(visitedCountries);\n      newVisitedCountries.add(arrivalAirport.Country);\n\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"],\n        Country: arrivalAirport.Country // Add country info for reference\n      }];\n\n      const newRoutes = findPossibleRoutes(\n        origin,\n        destination,\n        newVisited,\n        newVisitedCountries,\n        newPath,\n        directDistance\n      );\n\n      routes.push(...newRoutes);\n    }\n\n    return routes;\n  };\n\n  // Handles the search button click\n  // Updates URL parameters and finds possible routes\n  const handleSearch = () => {\n    if (departureAirport && arrivalAirport) {\n      const params = new URLSearchParams();\n      params.set('from', departureAirport);\n      params.set('to', arrivalAirport);\n      \n      window.history.pushState(\n        {}, \n        '', \n        `${window.location.pathname}?${params.toString()}`\n      );\n      \n      const originAirport = airports.find(a => a.IATA === departureAirport);\n      const visited = new Set([departureAirport]);\n      const visitedCountries = new Set([originAirport.Country]);\n      \n      const routes = findPossibleRoutes(\n        departureAirport, \n        arrivalAirport, \n        visited,\n        visitedCountries\n      );\n      \n      setSearchResults(routes);\n      setShowResults(true);\n    }\n  };\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-boxes\">\n        <AirportSearch \n          label=\"Departure\"\n          value={departureAirport}\n          onChange={setDepartureAirport}\n        />\n        <AirportSearch \n          label=\"Arrival\"\n          value={arrivalAirport}\n          onChange={setArrivalAirport}\n        />\n        <button onClick={handleSearch}>Search Flights</button>\n      </div>\n      <FlightResults \n        results={searchResults} \n        isVisible={showResults}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}