{"ast":null,"code":"import React,{useState,useEffect}from'react';import{AirportSearch}from'./AirportSearch';import{FlightResults}from'./FlightResults';import UA_miles from'../data/UA_miles.json';import SQ_miles from'../data/SQ_miles.json';import LH_miles from'../data/LH_miles.json';import LX_miles from'../data/LX_miles.json';import TG_miles from'../data/TG_miles.json';import BR_miles from'../data/BR_miles.json';import NH_miles from'../data/NH_miles.json';import OS_miles from'../data/OS_miles.json';import OZ_miles from'../data/OZ_miles.json';import NZ_miles from'../data/NZ_miles.json';import SA_miles from'../data/SA_miles.json';import AI_miles from'../data/AI_miles.json';import LO_miles from'../data/LO_miles.json';import SN_miles from'../data/SN_miles.json';import A3_miles from'../data/A3_miles.json';import TP_miles from'../data/TP_miles.json';import MS_miles from'../data/MS_miles.json';import WY_miles from'../data/WY_miles.json';import GF_miles from'../data/GF_miles.json';import AC_miles from'../data/AC_miles.json';import{airports}from'../data/airports';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export function SearchPage(){const[departureAirport,setDepartureAirport]=useState('');const[arrivalAirport,setArrivalAirport]=useState('');const[searchResults,setSearchResults]=useState([]);const[showResults,setShowResults]=useState(false);function calculateDirectDistance(origin,destination){const originAirport=airports.find(a=>a.IATA===origin);const destAirport=airports.find(a=>a.IATA===destination);if(!originAirport||!destAirport)return null;const R=3959;// Earth's radius in miles\nconst lat1=originAirport.Latitude*Math.PI/180;const lat2=destAirport.Latitude*Math.PI/180;const dLat=(destAirport.Latitude-originAirport.Latitude)*Math.PI/180;const dLon=(destAirport.Longitude-originAirport.Longitude)*Math.PI/180;const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLon/2)*Math.sin(dLon/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}const findPossibleRoutes=function(origin,destination){let visited=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Set();let visitedCountries=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new Set();let path=arguments.length>4&&arguments[4]!==undefined?arguments[4]:[];let directDistance=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;const allRoutes=[...UA_miles,...SQ_miles,...LH_miles,...LX_miles,...TG_miles,...BR_miles,...NH_miles,...OS_miles,...OZ_miles,...NZ_miles,...SA_miles,...AI_miles,...LO_miles,...SN_miles,...A3_miles,...TP_miles,...MS_miles,...WY_miles,...GF_miles,...AC_miles];const routes=[];// Calculate direct distance if not provided\nif(directDistance===null){directDistance=calculateDirectDistance(origin,destination);if(!directDistance)return[];}// Base case: if we've found a path to the destination\nif(path.length>0&&path[path.length-1].Arrival_IATA===destination){const totalDistance=path.reduce((sum,segment)=>sum+segment.Distance,0);if(totalDistance<=directDistance*2){return[path];}return[];}// Don't allow paths longer than 6 segments (5 stops)\nif(path.length>=4){return[];}// Get current point and its country\nconst currentPoint=path.length===0?origin:path[path.length-1].Arrival_IATA;const currentAirport=airports.find(a=>a.IATA===currentPoint);if(!currentAirport)return[];// Get all possible next segments\nconst possibleSegments=allRoutes.filter(route=>{if(route[\"Departure IATA\"]!==currentPoint)return false;// Get the arrival airport details\nconst arrivalAirport=airports.find(a=>a.IATA===route[\"Arrival IATA\"]);if(!arrivalAirport)return false;// Check if we're not backtracking to a visited airport\nif(visited.has(route[\"Arrival IATA\"]))return false;// Check if we're not backtracking to a visited country\n// Exception: Allow same country connection if it's a direct continuation\nconst isBacktrackingCountry=visitedCountries.has(arrivalAirport.Country)&&arrivalAirport.Country!==currentAirport.Country;if(isBacktrackingCountry)return false;return true;});// Try each possible next segment\nfor(const segment of possibleSegments){const arrivalAirport=airports.find(a=>a.IATA===segment[\"Arrival IATA\"]);// Calculate running total distance\nconst currentTotalDistance=path.reduce((sum,seg)=>sum+seg.Distance,0)+segment[\"Flight Distance (miles)\"];// Skip this path if it's already over 2x direct distance\nif(currentTotalDistance>directDistance*2){continue;}// Update visited sets\nconst newVisited=new Set(visited);newVisited.add(segment[\"Arrival IATA\"]);const newVisitedCountries=new Set(visitedCountries);newVisitedCountries.add(arrivalAirport.Country);const newPath=[...path,{Departure_IATA:segment[\"Departure IATA\"],Arrival_IATA:segment[\"Arrival IATA\"],Distance:segment[\"Flight Distance (miles)\"],Country:arrivalAirport.Country// Add country info for reference\n}];const newRoutes=findPossibleRoutes(origin,destination,newVisited,newVisitedCountries,newPath,directDistance);routes.push(...newRoutes);}return routes;};const handleSearch=()=>{if(departureAirport&&arrivalAirport){const params=new URLSearchParams();params.set('from',departureAirport);params.set('to',arrivalAirport);window.history.pushState({},'',`${window.location.pathname}?${params.toString()}`);const originAirport=airports.find(a=>a.IATA===departureAirport);const visited=new Set([departureAirport]);const visitedCountries=new Set([originAirport.Country]);const routes=findPossibleRoutes(departureAirport,arrivalAirport,visited,visitedCountries);setSearchResults(routes);setShowResults(true);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-boxes\",children:[/*#__PURE__*/_jsx(AirportSearch,{label:\"Departure\",value:departureAirport,onChange:setDepartureAirport}),/*#__PURE__*/_jsx(AirportSearch,{label:\"Arrival\",value:arrivalAirport,onChange:setArrivalAirport}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSearch,children:\"Search Flights\"})]}),/*#__PURE__*/_jsx(FlightResults,{results:searchResults,isVisible:showResults})]});}","map":{"version":3,"names":["React","useState","useEffect","AirportSearch","FlightResults","UA_miles","SQ_miles","LH_miles","LX_miles","TG_miles","BR_miles","NH_miles","OS_miles","OZ_miles","NZ_miles","SA_miles","AI_miles","LO_miles","SN_miles","A3_miles","TP_miles","MS_miles","WY_miles","GF_miles","AC_miles","airports","jsx","_jsx","jsxs","_jsxs","SearchPage","departureAirport","setDepartureAirport","arrivalAirport","setArrivalAirport","searchResults","setSearchResults","showResults","setShowResults","calculateDirectDistance","origin","destination","originAirport","find","a","IATA","destAirport","R","lat1","Latitude","Math","PI","lat2","dLat","dLon","Longitude","sin","cos","c","atan2","sqrt","findPossibleRoutes","visited","arguments","length","undefined","Set","visitedCountries","path","directDistance","allRoutes","routes","Arrival_IATA","totalDistance","reduce","sum","segment","Distance","currentPoint","currentAirport","possibleSegments","filter","route","has","isBacktrackingCountry","Country","currentTotalDistance","seg","newVisited","add","newVisitedCountries","newPath","Departure_IATA","newRoutes","push","handleSearch","params","URLSearchParams","set","window","history","pushState","location","pathname","toString","className","children","label","value","onChange","onClick","results","isVisible"],"sources":["/Users/hanguyen/Route builder/RouteBuilder/src/components/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AirportSearch } from './AirportSearch';\nimport { FlightResults } from './FlightResults';\nimport UA_miles from '../data/UA_miles.json';\nimport SQ_miles from '../data/SQ_miles.json';\nimport LH_miles from '../data/LH_miles.json';\nimport LX_miles from '../data/LX_miles.json';\nimport TG_miles from '../data/TG_miles.json';\nimport BR_miles from '../data/BR_miles.json';\nimport NH_miles from '../data/NH_miles.json';\nimport OS_miles from '../data/OS_miles.json';\nimport OZ_miles from '../data/OZ_miles.json';\nimport NZ_miles from '../data/NZ_miles.json';   \nimport SA_miles from '../data/SA_miles.json';\nimport AI_miles from '../data/AI_miles.json';\nimport LO_miles from '../data/LO_miles.json';\nimport SN_miles from '../data/SN_miles.json'; \nimport A3_miles from '../data/A3_miles.json';\nimport TP_miles from '../data/TP_miles.json';\nimport MS_miles from '../data/MS_miles.json';\nimport WY_miles from '../data/WY_miles.json';\nimport GF_miles from '../data/GF_miles.json';\nimport AC_miles from '../data/AC_miles.json';\nimport { airports } from '../data/airports';\n\nexport function SearchPage() {\n  const [departureAirport, setDepartureAirport] = useState('');\n  const [arrivalAirport, setArrivalAirport] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n\n  function calculateDirectDistance(origin, destination) {\n    const originAirport = airports.find(a => a.IATA === origin);\n    const destAirport = airports.find(a => a.IATA === destination);\n    \n    if (!originAirport || !destAirport) return null;\n\n    const R = 3959; // Earth's radius in miles\n    const lat1 = originAirport.Latitude * Math.PI / 180;\n    const lat2 = destAirport.Latitude * Math.PI / 180;\n    const dLat = (destAirport.Latitude - originAirport.Latitude) * Math.PI / 180;\n    const dLon = (destAirport.Longitude - originAirport.Longitude) * Math.PI / 180;\n\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n             Math.cos(lat1) * Math.cos(lat2) *\n             Math.sin(dLon/2) * Math.sin(dLon/2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  const findPossibleRoutes = (origin, destination, visited = new Set(), visitedCountries = new Set(), path = [], directDistance = null) => {\n    const allRoutes = [...UA_miles, ...SQ_miles, ...LH_miles, ...LX_miles, ...TG_miles, ...BR_miles, ...NH_miles, ...OS_miles, ...OZ_miles, ...NZ_miles, ...SA_miles, ...AI_miles, ...LO_miles, ...SN_miles, ...A3_miles, ...TP_miles, ...MS_miles, ...WY_miles, ...GF_miles, ...AC_miles];\n    const routes = [];\n\n    // Calculate direct distance if not provided\n    if (directDistance === null) {\n      directDistance = calculateDirectDistance(origin, destination);\n      if (!directDistance) return [];\n    }\n\n    // Base case: if we've found a path to the destination\n    if (path.length > 0 && path[path.length - 1].Arrival_IATA === destination) {\n      const totalDistance = path.reduce((sum, segment) => sum + segment.Distance, 0);\n      if (totalDistance <= directDistance * 2) {\n        return [path];\n      }\n      return [];\n    }\n\n    // Don't allow paths longer than 6 segments (5 stops)\n    if (path.length >= 4) {\n      return [];\n    }\n\n    // Get current point and its country\n    const currentPoint = path.length === 0 ? origin : path[path.length - 1].Arrival_IATA;\n    const currentAirport = airports.find(a => a.IATA === currentPoint);\n    \n    if (!currentAirport) return [];\n\n    // Get all possible next segments\n    const possibleSegments = allRoutes.filter(route => {\n      if (route[\"Departure IATA\"] !== currentPoint) return false;\n      \n      // Get the arrival airport details\n      const arrivalAirport = airports.find(a => a.IATA === route[\"Arrival IATA\"]);\n      if (!arrivalAirport) return false;\n\n      // Check if we're not backtracking to a visited airport\n      if (visited.has(route[\"Arrival IATA\"])) return false;\n\n      // Check if we're not backtracking to a visited country\n      // Exception: Allow same country connection if it's a direct continuation\n      const isBacktrackingCountry = visitedCountries.has(arrivalAirport.Country) &&\n                                  arrivalAirport.Country !== currentAirport.Country;\n      if (isBacktrackingCountry) return false;\n\n      return true;\n    });\n\n    // Try each possible next segment\n    for (const segment of possibleSegments) {\n      const arrivalAirport = airports.find(a => a.IATA === segment[\"Arrival IATA\"]);\n      \n      // Calculate running total distance\n      const currentTotalDistance = path.reduce((sum, seg) => sum + seg.Distance, 0) + \n                               segment[\"Flight Distance (miles)\"];\n      \n      // Skip this path if it's already over 2x direct distance\n      if (currentTotalDistance > directDistance * 2) {\n        continue;\n      }\n\n      // Update visited sets\n      const newVisited = new Set(visited);\n      newVisited.add(segment[\"Arrival IATA\"]);\n      \n      const newVisitedCountries = new Set(visitedCountries);\n      newVisitedCountries.add(arrivalAirport.Country);\n\n      const newPath = [...path, {\n        Departure_IATA: segment[\"Departure IATA\"],\n        Arrival_IATA: segment[\"Arrival IATA\"],\n        Distance: segment[\"Flight Distance (miles)\"],\n        Country: arrivalAirport.Country // Add country info for reference\n      }];\n\n      const newRoutes = findPossibleRoutes(\n        origin,\n        destination,\n        newVisited,\n        newVisitedCountries,\n        newPath,\n        directDistance\n      );\n\n      routes.push(...newRoutes);\n    }\n\n    return routes;\n  };\n\n  const handleSearch = () => {\n    if (departureAirport && arrivalAirport) {\n      const params = new URLSearchParams();\n      params.set('from', departureAirport);\n      params.set('to', arrivalAirport);\n      \n      window.history.pushState(\n        {}, \n        '', \n        `${window.location.pathname}?${params.toString()}`\n      );\n      \n      const originAirport = airports.find(a => a.IATA === departureAirport);\n      const visited = new Set([departureAirport]);\n      const visitedCountries = new Set([originAirport.Country]);\n      \n      const routes = findPossibleRoutes(\n        departureAirport, \n        arrivalAirport, \n        visited,\n        visitedCountries\n      );\n      \n      setSearchResults(routes);\n      setShowResults(true);\n    }\n  };\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-boxes\">\n        <AirportSearch \n          label=\"Departure\"\n          value={departureAirport}\n          onChange={setDepartureAirport}\n        />\n        <AirportSearch \n          label=\"Arrival\"\n          value={arrivalAirport}\n          onChange={setArrivalAirport}\n        />\n        <button onClick={handleSearch}>Search Flights</button>\n      </div>\n      <FlightResults \n        results={searchResults} \n        isVisible={showResults}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}